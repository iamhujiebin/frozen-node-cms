// source: userProxy.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

goog.exportSymbol('proto.userProxy.AddTimeFree', null, global);
goog.exportSymbol('proto.userProxy.AddTimeGift', null, global);
goog.exportSymbol('proto.userProxy.BizRequest', null, global);
goog.exportSymbol('proto.userProxy.BizResponse', null, global);
goog.exportSymbol('proto.userProxy.CallReady', null, global);
goog.exportSymbol('proto.userProxy.ConfigChange', null, global);
goog.exportSymbol('proto.userProxy.ConnectCommon', null, global);
goog.exportSymbol('proto.userProxy.ConnectStatus', null, global);
goog.exportSymbol('proto.userProxy.ConnectsCall', null, global);
goog.exportSymbol('proto.userProxy.ConnectsQuit', null, global);
goog.exportSymbol('proto.userProxy.CpInvite', null, global);
goog.exportSymbol('proto.userProxy.CpUpgrade', null, global);
goog.exportSymbol('proto.userProxy.DailyInAppDiamond', null, global);
goog.exportSymbol('proto.userProxy.DiamondChange', null, global);
goog.exportSymbol('proto.userProxy.EnterRoom', null, global);
goog.exportSymbol('proto.userProxy.FruitMachine', null, global);
goog.exportSymbol('proto.userProxy.GlobalBroadcast', null, global);
goog.exportSymbol('proto.userProxy.GlobalGameBanner', null, global);
goog.exportSymbol('proto.userProxy.GlobalGiftBanner', null, global);
goog.exportSymbol('proto.userProxy.GlobalGiftBannerRsp', null, global);
goog.exportSymbol('proto.userProxy.GlobalRocketNotice', null, global);
goog.exportSymbol('proto.userProxy.GroupActivity', null, global);
goog.exportSymbol('proto.userProxy.GroupSendNotice', null, global);
goog.exportSymbol('proto.userProxy.HeartBeat', null, global);
goog.exportSymbol('proto.userProxy.HeartBeatRsp', null, global);
goog.exportSymbol('proto.userProxy.JoinGroup', null, global);
goog.exportSymbol('proto.userProxy.LeaveRoom', null, global);
goog.exportSymbol('proto.userProxy.LikeEach', null, global);
goog.exportSymbol('proto.userProxy.LikeMe', null, global);
goog.exportSymbol('proto.userProxy.Login', null, global);
goog.exportSymbol('proto.userProxy.LoginRsp', null, global);
goog.exportSymbol('proto.userProxy.LuckyWheel', null, global);
goog.exportSymbol('proto.userProxy.LuckyWheelBanner', null, global);
goog.exportSymbol('proto.userProxy.LuckyWheelDiamondChange', null, global);
goog.exportSymbol('proto.userProxy.MatchConfirm', null, global);
goog.exportSymbol('proto.userProxy.MatchSuccess', null, global);
goog.exportSymbol('proto.userProxy.MicTaskFinish', null, global);
goog.exportSymbol('proto.userProxy.NobleChange', null, global);
goog.exportSymbol('proto.userProxy.RecallWindow', null, global);
goog.exportSymbol('proto.userProxy.RoomHeartBeat', null, global);
goog.exportSymbol('proto.userProxy.RoomInviteMember', null, global);
goog.exportSymbol('proto.userProxy.SheepGamePlayer', null, global);
goog.exportSymbol('proto.userProxy.SheepGameResult', null, global);
goog.exportSymbol('proto.userProxy.SheepMatchSuccess', null, global);
goog.exportSymbol('proto.userProxy.Svip', null, global);
goog.exportSymbol('proto.userProxy.SvipPrivilege', null, global);
goog.exportSymbol('proto.userProxy.SvipUpgrade', null, global);
goog.exportSymbol('proto.userProxy.User', null, global);
goog.exportSymbol('proto.userProxy.Video', null, global);
goog.exportSymbol('proto.userProxy.VideoCallReady', null, global);
goog.exportSymbol('proto.userProxy.VideoMiss', null, global);
goog.exportSymbol('proto.userProxy.VideoTimeMinuteCheck', null, global);
goog.exportSymbol('proto.userProxy.VideoTimeMinuteSuccess', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.userProxy.User = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.userProxy.User, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.userProxy.User.displayName = 'proto.userProxy.User';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.userProxy.Svip = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.userProxy.Svip.repeatedFields_, null);
};
goog.inherits(proto.userProxy.Svip, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.userProxy.Svip.displayName = 'proto.userProxy.Svip';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.userProxy.SvipPrivilege = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.userProxy.SvipPrivilege, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.userProxy.SvipPrivilege.displayName = 'proto.userProxy.SvipPrivilege';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.userProxy.Login = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.userProxy.Login, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.userProxy.Login.displayName = 'proto.userProxy.Login';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.userProxy.LoginRsp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.userProxy.LoginRsp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.userProxy.LoginRsp.displayName = 'proto.userProxy.LoginRsp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.userProxy.HeartBeat = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.userProxy.HeartBeat, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.userProxy.HeartBeat.displayName = 'proto.userProxy.HeartBeat';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.userProxy.HeartBeatRsp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.userProxy.HeartBeatRsp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.userProxy.HeartBeatRsp.displayName = 'proto.userProxy.HeartBeatRsp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.userProxy.BizRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.userProxy.BizRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.userProxy.BizRequest.displayName = 'proto.userProxy.BizRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.userProxy.BizResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.userProxy.BizResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.userProxy.BizResponse.displayName = 'proto.userProxy.BizResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.userProxy.MatchSuccess = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.userProxy.MatchSuccess, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.userProxy.MatchSuccess.displayName = 'proto.userProxy.MatchSuccess';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.userProxy.MatchConfirm = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.userProxy.MatchConfirm, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.userProxy.MatchConfirm.displayName = 'proto.userProxy.MatchConfirm';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.userProxy.CallReady = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.userProxy.CallReady, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.userProxy.CallReady.displayName = 'proto.userProxy.CallReady';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.userProxy.AddTimeGift = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.userProxy.AddTimeGift, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.userProxy.AddTimeGift.displayName = 'proto.userProxy.AddTimeGift';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.userProxy.AddTimeFree = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.userProxy.AddTimeFree, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.userProxy.AddTimeFree.displayName = 'proto.userProxy.AddTimeFree';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.userProxy.ConnectsQuit = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.userProxy.ConnectsQuit, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.userProxy.ConnectsQuit.displayName = 'proto.userProxy.ConnectsQuit';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.userProxy.ConnectStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.userProxy.ConnectStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.userProxy.ConnectStatus.displayName = 'proto.userProxy.ConnectStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.userProxy.ConnectsCall = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.userProxy.ConnectsCall, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.userProxy.ConnectsCall.displayName = 'proto.userProxy.ConnectsCall';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.userProxy.ConnectCommon = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.userProxy.ConnectCommon, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.userProxy.ConnectCommon.displayName = 'proto.userProxy.ConnectCommon';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.userProxy.RecallWindow = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.userProxy.RecallWindow, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.userProxy.RecallWindow.displayName = 'proto.userProxy.RecallWindow';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.userProxy.Video = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.userProxy.Video, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.userProxy.Video.displayName = 'proto.userProxy.Video';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.userProxy.VideoCallReady = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.userProxy.VideoCallReady, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.userProxy.VideoCallReady.displayName = 'proto.userProxy.VideoCallReady';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.userProxy.LikeEach = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.userProxy.LikeEach, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.userProxy.LikeEach.displayName = 'proto.userProxy.LikeEach';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.userProxy.LikeMe = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.userProxy.LikeMe, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.userProxy.LikeMe.displayName = 'proto.userProxy.LikeMe';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.userProxy.DailyInAppDiamond = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.userProxy.DailyInAppDiamond, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.userProxy.DailyInAppDiamond.displayName = 'proto.userProxy.DailyInAppDiamond';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.userProxy.GlobalGiftBanner = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.userProxy.GlobalGiftBanner, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.userProxy.GlobalGiftBanner.displayName = 'proto.userProxy.GlobalGiftBanner';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.userProxy.GlobalGiftBannerRsp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.userProxy.GlobalGiftBannerRsp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.userProxy.GlobalGiftBannerRsp.displayName = 'proto.userProxy.GlobalGiftBannerRsp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.userProxy.LuckyWheel = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.userProxy.LuckyWheel, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.userProxy.LuckyWheel.displayName = 'proto.userProxy.LuckyWheel';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.userProxy.LuckyWheelBanner = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.userProxy.LuckyWheelBanner, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.userProxy.LuckyWheelBanner.displayName = 'proto.userProxy.LuckyWheelBanner';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.userProxy.LuckyWheelDiamondChange = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.userProxy.LuckyWheelDiamondChange, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.userProxy.LuckyWheelDiamondChange.displayName = 'proto.userProxy.LuckyWheelDiamondChange';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.userProxy.ConfigChange = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.userProxy.ConfigChange, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.userProxy.ConfigChange.displayName = 'proto.userProxy.ConfigChange';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.userProxy.GlobalRocketNotice = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.userProxy.GlobalRocketNotice, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.userProxy.GlobalRocketNotice.displayName = 'proto.userProxy.GlobalRocketNotice';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.userProxy.GroupSendNotice = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.userProxy.GroupSendNotice, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.userProxy.GroupSendNotice.displayName = 'proto.userProxy.GroupSendNotice';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.userProxy.GlobalBroadcast = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.userProxy.GlobalBroadcast, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.userProxy.GlobalBroadcast.displayName = 'proto.userProxy.GlobalBroadcast';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.userProxy.MicTaskFinish = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.userProxy.MicTaskFinish, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.userProxy.MicTaskFinish.displayName = 'proto.userProxy.MicTaskFinish';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.userProxy.FruitMachine = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.userProxy.FruitMachine, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.userProxy.FruitMachine.displayName = 'proto.userProxy.FruitMachine';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.userProxy.NobleChange = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.userProxy.NobleChange, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.userProxy.NobleChange.displayName = 'proto.userProxy.NobleChange';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.userProxy.JoinGroup = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.userProxy.JoinGroup, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.userProxy.JoinGroup.displayName = 'proto.userProxy.JoinGroup';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.userProxy.VideoTimeMinuteSuccess = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.userProxy.VideoTimeMinuteSuccess, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.userProxy.VideoTimeMinuteSuccess.displayName = 'proto.userProxy.VideoTimeMinuteSuccess';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.userProxy.VideoTimeMinuteCheck = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.userProxy.VideoTimeMinuteCheck, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.userProxy.VideoTimeMinuteCheck.displayName = 'proto.userProxy.VideoTimeMinuteCheck';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.userProxy.VideoMiss = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.userProxy.VideoMiss, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.userProxy.VideoMiss.displayName = 'proto.userProxy.VideoMiss';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.userProxy.GroupActivity = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.userProxy.GroupActivity, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.userProxy.GroupActivity.displayName = 'proto.userProxy.GroupActivity';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.userProxy.RoomInviteMember = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.userProxy.RoomInviteMember, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.userProxy.RoomInviteMember.displayName = 'proto.userProxy.RoomInviteMember';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.userProxy.DiamondChange = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.userProxy.DiamondChange, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.userProxy.DiamondChange.displayName = 'proto.userProxy.DiamondChange';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.userProxy.GlobalGameBanner = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.userProxy.GlobalGameBanner, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.userProxy.GlobalGameBanner.displayName = 'proto.userProxy.GlobalGameBanner';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.userProxy.SheepMatchSuccess = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.userProxy.SheepMatchSuccess, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.userProxy.SheepMatchSuccess.displayName = 'proto.userProxy.SheepMatchSuccess';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.userProxy.SheepGamePlayer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.userProxy.SheepGamePlayer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.userProxy.SheepGamePlayer.displayName = 'proto.userProxy.SheepGamePlayer';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.userProxy.SheepGameResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.userProxy.SheepGameResult.repeatedFields_, null);
};
goog.inherits(proto.userProxy.SheepGameResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.userProxy.SheepGameResult.displayName = 'proto.userProxy.SheepGameResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.userProxy.CpInvite = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.userProxy.CpInvite, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.userProxy.CpInvite.displayName = 'proto.userProxy.CpInvite';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.userProxy.CpUpgrade = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.userProxy.CpUpgrade, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.userProxy.CpUpgrade.displayName = 'proto.userProxy.CpUpgrade';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.userProxy.SvipUpgrade = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.userProxy.SvipUpgrade, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.userProxy.SvipUpgrade.displayName = 'proto.userProxy.SvipUpgrade';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.userProxy.EnterRoom = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.userProxy.EnterRoom, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.userProxy.EnterRoom.displayName = 'proto.userProxy.EnterRoom';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.userProxy.LeaveRoom = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.userProxy.LeaveRoom, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.userProxy.LeaveRoom.displayName = 'proto.userProxy.LeaveRoom';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.userProxy.RoomHeartBeat = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.userProxy.RoomHeartBeat, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.userProxy.RoomHeartBeat.displayName = 'proto.userProxy.RoomHeartBeat';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.userProxy.User.prototype.toObject = function(opt_includeInstance) {
  return proto.userProxy.User.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.userProxy.User} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.userProxy.User.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    externalid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    nick: jspb.Message.getFieldWithDefault(msg, 3, ""),
    avatar: jspb.Message.getFieldWithDefault(msg, 4, ""),
    country: jspb.Message.getFieldWithDefault(msg, 5, ""),
    countryicon: jspb.Message.getFieldWithDefault(msg, 6, ""),
    birthday: jspb.Message.getFieldWithDefault(msg, 7, 0),
    isvip: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),
    islike: jspb.Message.getBooleanFieldWithDefault(msg, 9, false),
    islikeme: jspb.Message.getBooleanFieldWithDefault(msg, 10, false),
    code: jspb.Message.getFieldWithDefault(msg, 11, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.userProxy.User}
 */
proto.userProxy.User.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.userProxy.User;
  return proto.userProxy.User.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.userProxy.User} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.userProxy.User}
 */
proto.userProxy.User.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setExternalid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setNick(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setAvatar(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setCountry(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setCountryicon(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBirthday(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsvip(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIslike(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIslikeme(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.userProxy.User.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.userProxy.User.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.userProxy.User} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.userProxy.User.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getExternalid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getNick();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getAvatar();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getCountry();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getCountryicon();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getBirthday();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
  f = message.getIsvip();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getIslike();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
  f = message.getIslikeme();
  if (f) {
    writer.writeBool(
      10,
      f
    );
  }
  f = message.getCode();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
};


/**
 * optional uint64 id = 1;
 * @return {number}
 */
proto.userProxy.User.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.userProxy.User} returns this
 */
proto.userProxy.User.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string externalId = 2;
 * @return {string}
 */
proto.userProxy.User.prototype.getExternalid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.userProxy.User} returns this
 */
proto.userProxy.User.prototype.setExternalid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string nick = 3;
 * @return {string}
 */
proto.userProxy.User.prototype.getNick = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.userProxy.User} returns this
 */
proto.userProxy.User.prototype.setNick = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string avatar = 4;
 * @return {string}
 */
proto.userProxy.User.prototype.getAvatar = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.userProxy.User} returns this
 */
proto.userProxy.User.prototype.setAvatar = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string country = 5;
 * @return {string}
 */
proto.userProxy.User.prototype.getCountry = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.userProxy.User} returns this
 */
proto.userProxy.User.prototype.setCountry = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string countryIcon = 6;
 * @return {string}
 */
proto.userProxy.User.prototype.getCountryicon = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.userProxy.User} returns this
 */
proto.userProxy.User.prototype.setCountryicon = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional uint64 birthday = 7;
 * @return {number}
 */
proto.userProxy.User.prototype.getBirthday = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.userProxy.User} returns this
 */
proto.userProxy.User.prototype.setBirthday = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional bool isVip = 8;
 * @return {boolean}
 */
proto.userProxy.User.prototype.getIsvip = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.userProxy.User} returns this
 */
proto.userProxy.User.prototype.setIsvip = function(value) {
  return jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * optional bool isLike = 9;
 * @return {boolean}
 */
proto.userProxy.User.prototype.getIslike = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false));
};


/**
 * @param {boolean} value
 * @return {!proto.userProxy.User} returns this
 */
proto.userProxy.User.prototype.setIslike = function(value) {
  return jspb.Message.setProto3BooleanField(this, 9, value);
};


/**
 * optional bool isLikeMe = 10;
 * @return {boolean}
 */
proto.userProxy.User.prototype.getIslikeme = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 10, false));
};


/**
 * @param {boolean} value
 * @return {!proto.userProxy.User} returns this
 */
proto.userProxy.User.prototype.setIslikeme = function(value) {
  return jspb.Message.setProto3BooleanField(this, 10, value);
};


/**
 * optional string code = 11;
 * @return {string}
 */
proto.userProxy.User.prototype.getCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.userProxy.User} returns this
 */
proto.userProxy.User.prototype.setCode = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.userProxy.Svip.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.userProxy.Svip.prototype.toObject = function(opt_includeInstance) {
  return proto.userProxy.Svip.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.userProxy.Svip} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.userProxy.Svip.toObject = function(includeInstance, msg) {
  var f, obj = {
    sviplevel: jspb.Message.getFieldWithDefault(msg, 1, 0),
    privilegesList: jspb.Message.toObjectList(msg.getPrivilegesList(),
    proto.userProxy.SvipPrivilege.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.userProxy.Svip}
 */
proto.userProxy.Svip.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.userProxy.Svip;
  return proto.userProxy.Svip.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.userProxy.Svip} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.userProxy.Svip}
 */
proto.userProxy.Svip.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSviplevel(value);
      break;
    case 2:
      var value = new proto.userProxy.SvipPrivilege;
      reader.readMessage(value,proto.userProxy.SvipPrivilege.deserializeBinaryFromReader);
      msg.addPrivileges(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.userProxy.Svip.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.userProxy.Svip.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.userProxy.Svip} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.userProxy.Svip.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSviplevel();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getPrivilegesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.userProxy.SvipPrivilege.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 svipLevel = 1;
 * @return {number}
 */
proto.userProxy.Svip.prototype.getSviplevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.userProxy.Svip} returns this
 */
proto.userProxy.Svip.prototype.setSviplevel = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated SvipPrivilege privileges = 2;
 * @return {!Array<!proto.userProxy.SvipPrivilege>}
 */
proto.userProxy.Svip.prototype.getPrivilegesList = function() {
  return /** @type{!Array<!proto.userProxy.SvipPrivilege>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.userProxy.SvipPrivilege, 2));
};


/**
 * @param {!Array<!proto.userProxy.SvipPrivilege>} value
 * @return {!proto.userProxy.Svip} returns this
*/
proto.userProxy.Svip.prototype.setPrivilegesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.userProxy.SvipPrivilege=} opt_value
 * @param {number=} opt_index
 * @return {!proto.userProxy.SvipPrivilege}
 */
proto.userProxy.Svip.prototype.addPrivileges = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.userProxy.SvipPrivilege, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.userProxy.Svip} returns this
 */
proto.userProxy.Svip.prototype.clearPrivilegesList = function() {
  return this.setPrivilegesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.userProxy.SvipPrivilege.prototype.toObject = function(opt_includeInstance) {
  return proto.userProxy.SvipPrivilege.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.userProxy.SvipPrivilege} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.userProxy.SvipPrivilege.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    canswitch: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    userswitch: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    mysterycode: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.userProxy.SvipPrivilege}
 */
proto.userProxy.SvipPrivilege.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.userProxy.SvipPrivilege;
  return proto.userProxy.SvipPrivilege.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.userProxy.SvipPrivilege} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.userProxy.SvipPrivilege}
 */
proto.userProxy.SvipPrivilege.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCanswitch(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUserswitch(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setMysterycode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.userProxy.SvipPrivilege.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.userProxy.SvipPrivilege.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.userProxy.SvipPrivilege} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.userProxy.SvipPrivilege.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getCanswitch();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getUserswitch();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getMysterycode();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional int32 type = 1;
 * @return {number}
 */
proto.userProxy.SvipPrivilege.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.userProxy.SvipPrivilege} returns this
 */
proto.userProxy.SvipPrivilege.prototype.setType = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bool canSwitch = 2;
 * @return {boolean}
 */
proto.userProxy.SvipPrivilege.prototype.getCanswitch = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.userProxy.SvipPrivilege} returns this
 */
proto.userProxy.SvipPrivilege.prototype.setCanswitch = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool userSwitch = 3;
 * @return {boolean}
 */
proto.userProxy.SvipPrivilege.prototype.getUserswitch = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.userProxy.SvipPrivilege} returns this
 */
proto.userProxy.SvipPrivilege.prototype.setUserswitch = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional string mysteryCode = 4;
 * @return {string}
 */
proto.userProxy.SvipPrivilege.prototype.getMysterycode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.userProxy.SvipPrivilege} returns this
 */
proto.userProxy.SvipPrivilege.prototype.setMysterycode = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.userProxy.Login.prototype.toObject = function(opt_includeInstance) {
  return proto.userProxy.Login.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.userProxy.Login} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.userProxy.Login.toObject = function(includeInstance, msg) {
  var f, obj = {
    token: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.userProxy.Login}
 */
proto.userProxy.Login.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.userProxy.Login;
  return proto.userProxy.Login.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.userProxy.Login} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.userProxy.Login}
 */
proto.userProxy.Login.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.userProxy.Login.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.userProxy.Login.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.userProxy.Login} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.userProxy.Login.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string token = 1;
 * @return {string}
 */
proto.userProxy.Login.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.userProxy.Login} returns this
 */
proto.userProxy.Login.prototype.setToken = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.userProxy.LoginRsp.prototype.toObject = function(opt_includeInstance) {
  return proto.userProxy.LoginRsp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.userProxy.LoginRsp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.userProxy.LoginRsp.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.userProxy.LoginRsp}
 */
proto.userProxy.LoginRsp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.userProxy.LoginRsp;
  return proto.userProxy.LoginRsp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.userProxy.LoginRsp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.userProxy.LoginRsp}
 */
proto.userProxy.LoginRsp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.userProxy.LoginRsp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.userProxy.LoginRsp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.userProxy.LoginRsp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.userProxy.LoginRsp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 status = 1;
 * @return {number}
 */
proto.userProxy.LoginRsp.prototype.getStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.userProxy.LoginRsp} returns this
 */
proto.userProxy.LoginRsp.prototype.setStatus = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.userProxy.HeartBeat.prototype.toObject = function(opt_includeInstance) {
  return proto.userProxy.HeartBeat.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.userProxy.HeartBeat} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.userProxy.HeartBeat.toObject = function(includeInstance, msg) {
  var f, obj = {
    externaluid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.userProxy.HeartBeat}
 */
proto.userProxy.HeartBeat.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.userProxy.HeartBeat;
  return proto.userProxy.HeartBeat.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.userProxy.HeartBeat} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.userProxy.HeartBeat}
 */
proto.userProxy.HeartBeat.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setExternaluid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.userProxy.HeartBeat.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.userProxy.HeartBeat.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.userProxy.HeartBeat} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.userProxy.HeartBeat.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getExternaluid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string externalUid = 1;
 * @return {string}
 */
proto.userProxy.HeartBeat.prototype.getExternaluid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.userProxy.HeartBeat} returns this
 */
proto.userProxy.HeartBeat.prototype.setExternaluid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.userProxy.HeartBeatRsp.prototype.toObject = function(opt_includeInstance) {
  return proto.userProxy.HeartBeatRsp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.userProxy.HeartBeatRsp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.userProxy.HeartBeatRsp.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.userProxy.HeartBeatRsp}
 */
proto.userProxy.HeartBeatRsp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.userProxy.HeartBeatRsp;
  return proto.userProxy.HeartBeatRsp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.userProxy.HeartBeatRsp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.userProxy.HeartBeatRsp}
 */
proto.userProxy.HeartBeatRsp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.userProxy.HeartBeatRsp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.userProxy.HeartBeatRsp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.userProxy.HeartBeatRsp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.userProxy.HeartBeatRsp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 status = 1;
 * @return {number}
 */
proto.userProxy.HeartBeatRsp.prototype.getStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.userProxy.HeartBeatRsp} returns this
 */
proto.userProxy.HeartBeatRsp.prototype.setStatus = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.userProxy.BizRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.userProxy.BizRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.userProxy.BizRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.userProxy.BizRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    payload: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.userProxy.BizRequest}
 */
proto.userProxy.BizRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.userProxy.BizRequest;
  return proto.userProxy.BizRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.userProxy.BizRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.userProxy.BizRequest}
 */
proto.userProxy.BizRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPayload(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.userProxy.BizRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.userProxy.BizRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.userProxy.BizRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.userProxy.BizRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getPayload();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional uint32 type = 1;
 * @return {number}
 */
proto.userProxy.BizRequest.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.userProxy.BizRequest} returns this
 */
proto.userProxy.BizRequest.prototype.setType = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string payLoad = 2;
 * @return {string}
 */
proto.userProxy.BizRequest.prototype.getPayload = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.userProxy.BizRequest} returns this
 */
proto.userProxy.BizRequest.prototype.setPayload = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.userProxy.BizResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.userProxy.BizResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.userProxy.BizResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.userProxy.BizResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.userProxy.BizResponse}
 */
proto.userProxy.BizResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.userProxy.BizResponse;
  return proto.userProxy.BizResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.userProxy.BizResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.userProxy.BizResponse}
 */
proto.userProxy.BizResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.userProxy.BizResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.userProxy.BizResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.userProxy.BizResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.userProxy.BizResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 status = 1;
 * @return {number}
 */
proto.userProxy.BizResponse.prototype.getStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.userProxy.BizResponse} returns this
 */
proto.userProxy.BizResponse.prototype.setStatus = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.userProxy.MatchSuccess.prototype.toObject = function(opt_includeInstance) {
  return proto.userProxy.MatchSuccess.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.userProxy.MatchSuccess} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.userProxy.MatchSuccess.toObject = function(includeInstance, msg) {
  var f, obj = {
    localuserid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    remoteuserid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    waitduration: jspb.Message.getFieldWithDefault(msg, 3, 0),
    matchuniqueid: jspb.Message.getFieldWithDefault(msg, 4, ""),
    status: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    singlewaittimeinsec: jspb.Message.getFieldWithDefault(msg, 6, 0),
    dualwaittimeinsec: jspb.Message.getFieldWithDefault(msg, 7, 0),
    remoteuser: (f = msg.getRemoteuser()) && proto.userProxy.User.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.userProxy.MatchSuccess}
 */
proto.userProxy.MatchSuccess.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.userProxy.MatchSuccess;
  return proto.userProxy.MatchSuccess.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.userProxy.MatchSuccess} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.userProxy.MatchSuccess}
 */
proto.userProxy.MatchSuccess.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLocaluserid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRemoteuserid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setWaitduration(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setMatchuniqueid(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setStatus(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSinglewaittimeinsec(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDualwaittimeinsec(value);
      break;
    case 8:
      var value = new proto.userProxy.User;
      reader.readMessage(value,proto.userProxy.User.deserializeBinaryFromReader);
      msg.setRemoteuser(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.userProxy.MatchSuccess.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.userProxy.MatchSuccess.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.userProxy.MatchSuccess} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.userProxy.MatchSuccess.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLocaluserid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRemoteuserid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getWaitduration();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getMatchuniqueid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getStatus();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getSinglewaittimeinsec();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getDualwaittimeinsec();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = message.getRemoteuser();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.userProxy.User.serializeBinaryToWriter
    );
  }
};


/**
 * optional string localUserId = 1;
 * @return {string}
 */
proto.userProxy.MatchSuccess.prototype.getLocaluserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.userProxy.MatchSuccess} returns this
 */
proto.userProxy.MatchSuccess.prototype.setLocaluserid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string remoteUserId = 2;
 * @return {string}
 */
proto.userProxy.MatchSuccess.prototype.getRemoteuserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.userProxy.MatchSuccess} returns this
 */
proto.userProxy.MatchSuccess.prototype.setRemoteuserid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint32 waitDuration = 3;
 * @return {number}
 */
proto.userProxy.MatchSuccess.prototype.getWaitduration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.userProxy.MatchSuccess} returns this
 */
proto.userProxy.MatchSuccess.prototype.setWaitduration = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string matchUniqueId = 4;
 * @return {string}
 */
proto.userProxy.MatchSuccess.prototype.getMatchuniqueid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.userProxy.MatchSuccess} returns this
 */
proto.userProxy.MatchSuccess.prototype.setMatchuniqueid = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional bool status = 5;
 * @return {boolean}
 */
proto.userProxy.MatchSuccess.prototype.getStatus = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.userProxy.MatchSuccess} returns this
 */
proto.userProxy.MatchSuccess.prototype.setStatus = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional uint32 singleWaitTimeInSec = 6;
 * @return {number}
 */
proto.userProxy.MatchSuccess.prototype.getSinglewaittimeinsec = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.userProxy.MatchSuccess} returns this
 */
proto.userProxy.MatchSuccess.prototype.setSinglewaittimeinsec = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint32 dualWaitTimeInSec = 7;
 * @return {number}
 */
proto.userProxy.MatchSuccess.prototype.getDualwaittimeinsec = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.userProxy.MatchSuccess} returns this
 */
proto.userProxy.MatchSuccess.prototype.setDualwaittimeinsec = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional User remoteUser = 8;
 * @return {?proto.userProxy.User}
 */
proto.userProxy.MatchSuccess.prototype.getRemoteuser = function() {
  return /** @type{?proto.userProxy.User} */ (
    jspb.Message.getWrapperField(this, proto.userProxy.User, 8));
};


/**
 * @param {?proto.userProxy.User|undefined} value
 * @return {!proto.userProxy.MatchSuccess} returns this
*/
proto.userProxy.MatchSuccess.prototype.setRemoteuser = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.userProxy.MatchSuccess} returns this
 */
proto.userProxy.MatchSuccess.prototype.clearRemoteuser = function() {
  return this.setRemoteuser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.userProxy.MatchSuccess.prototype.hasRemoteuser = function() {
  return jspb.Message.getField(this, 8) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.userProxy.MatchConfirm.prototype.toObject = function(opt_includeInstance) {
  return proto.userProxy.MatchConfirm.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.userProxy.MatchConfirm} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.userProxy.MatchConfirm.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 1, 0),
    channelid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    token: jspb.Message.getFieldWithDefault(msg, 3, ""),
    localuserid: jspb.Message.getFieldWithDefault(msg, 4, ""),
    remoteuserid: jspb.Message.getFieldWithDefault(msg, 5, ""),
    remoteagoraid: jspb.Message.getFieldWithDefault(msg, 6, 0),
    callduration: jspb.Message.getFieldWithDefault(msg, 7, 0),
    localagoraid: jspb.Message.getFieldWithDefault(msg, 8, 0),
    diamondbalance: jspb.Message.getFieldWithDefault(msg, 9, 0),
    matchuniqueid: jspb.Message.getFieldWithDefault(msg, 10, ""),
    failtype: jspb.Message.getFieldWithDefault(msg, 11, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.userProxy.MatchConfirm}
 */
proto.userProxy.MatchConfirm.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.userProxy.MatchConfirm;
  return proto.userProxy.MatchConfirm.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.userProxy.MatchConfirm} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.userProxy.MatchConfirm}
 */
proto.userProxy.MatchConfirm.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setStatus(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setChannelid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setLocaluserid(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setRemoteuserid(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRemoteagoraid(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCallduration(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLocalagoraid(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDiamondbalance(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setMatchuniqueid(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFailtype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.userProxy.MatchConfirm.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.userProxy.MatchConfirm.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.userProxy.MatchConfirm} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.userProxy.MatchConfirm.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getChannelid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getLocaluserid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getRemoteuserid();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getRemoteagoraid();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getCallduration();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = message.getLocalagoraid();
  if (f !== 0) {
    writer.writeUint32(
      8,
      f
    );
  }
  f = message.getDiamondbalance();
  if (f !== 0) {
    writer.writeUint32(
      9,
      f
    );
  }
  f = message.getMatchuniqueid();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getFailtype();
  if (f !== 0) {
    writer.writeUint32(
      11,
      f
    );
  }
};


/**
 * optional uint32 status = 1;
 * @return {number}
 */
proto.userProxy.MatchConfirm.prototype.getStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.userProxy.MatchConfirm} returns this
 */
proto.userProxy.MatchConfirm.prototype.setStatus = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string channelId = 2;
 * @return {string}
 */
proto.userProxy.MatchConfirm.prototype.getChannelid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.userProxy.MatchConfirm} returns this
 */
proto.userProxy.MatchConfirm.prototype.setChannelid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string token = 3;
 * @return {string}
 */
proto.userProxy.MatchConfirm.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.userProxy.MatchConfirm} returns this
 */
proto.userProxy.MatchConfirm.prototype.setToken = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string localUserId = 4;
 * @return {string}
 */
proto.userProxy.MatchConfirm.prototype.getLocaluserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.userProxy.MatchConfirm} returns this
 */
proto.userProxy.MatchConfirm.prototype.setLocaluserid = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string remoteUserId = 5;
 * @return {string}
 */
proto.userProxy.MatchConfirm.prototype.getRemoteuserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.userProxy.MatchConfirm} returns this
 */
proto.userProxy.MatchConfirm.prototype.setRemoteuserid = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional uint32 remoteAgoraId = 6;
 * @return {number}
 */
proto.userProxy.MatchConfirm.prototype.getRemoteagoraid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.userProxy.MatchConfirm} returns this
 */
proto.userProxy.MatchConfirm.prototype.setRemoteagoraid = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint32 callDuration = 7;
 * @return {number}
 */
proto.userProxy.MatchConfirm.prototype.getCallduration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.userProxy.MatchConfirm} returns this
 */
proto.userProxy.MatchConfirm.prototype.setCallduration = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional uint32 localAgoraId = 8;
 * @return {number}
 */
proto.userProxy.MatchConfirm.prototype.getLocalagoraid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.userProxy.MatchConfirm} returns this
 */
proto.userProxy.MatchConfirm.prototype.setLocalagoraid = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional uint32 diamondBalance = 9;
 * @return {number}
 */
proto.userProxy.MatchConfirm.prototype.getDiamondbalance = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.userProxy.MatchConfirm} returns this
 */
proto.userProxy.MatchConfirm.prototype.setDiamondbalance = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional string matchUniqueId = 10;
 * @return {string}
 */
proto.userProxy.MatchConfirm.prototype.getMatchuniqueid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.userProxy.MatchConfirm} returns this
 */
proto.userProxy.MatchConfirm.prototype.setMatchuniqueid = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional uint32 failType = 11;
 * @return {number}
 */
proto.userProxy.MatchConfirm.prototype.getFailtype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.userProxy.MatchConfirm} returns this
 */
proto.userProxy.MatchConfirm.prototype.setFailtype = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.userProxy.CallReady.prototype.toObject = function(opt_includeInstance) {
  return proto.userProxy.CallReady.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.userProxy.CallReady} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.userProxy.CallReady.toObject = function(includeInstance, msg) {
  var f, obj = {
    starttimestamp: jspb.Message.getFieldWithDefault(msg, 1, 0),
    endtimestamp: jspb.Message.getFieldWithDefault(msg, 2, 0),
    callduration: jspb.Message.getFieldWithDefault(msg, 3, 0),
    channelid: jspb.Message.getFieldWithDefault(msg, 4, ""),
    remaindiamond: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.userProxy.CallReady}
 */
proto.userProxy.CallReady.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.userProxy.CallReady;
  return proto.userProxy.CallReady.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.userProxy.CallReady} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.userProxy.CallReady}
 */
proto.userProxy.CallReady.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setStarttimestamp(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setEndtimestamp(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCallduration(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setChannelid(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRemaindiamond(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.userProxy.CallReady.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.userProxy.CallReady.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.userProxy.CallReady} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.userProxy.CallReady.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStarttimestamp();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getEndtimestamp();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getCallduration();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getChannelid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getRemaindiamond();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
};


/**
 * optional uint64 startTimestamp = 1;
 * @return {number}
 */
proto.userProxy.CallReady.prototype.getStarttimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.userProxy.CallReady} returns this
 */
proto.userProxy.CallReady.prototype.setStarttimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 endTimestamp = 2;
 * @return {number}
 */
proto.userProxy.CallReady.prototype.getEndtimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.userProxy.CallReady} returns this
 */
proto.userProxy.CallReady.prototype.setEndtimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 callDuration = 3;
 * @return {number}
 */
proto.userProxy.CallReady.prototype.getCallduration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.userProxy.CallReady} returns this
 */
proto.userProxy.CallReady.prototype.setCallduration = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string channelId = 4;
 * @return {string}
 */
proto.userProxy.CallReady.prototype.getChannelid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.userProxy.CallReady} returns this
 */
proto.userProxy.CallReady.prototype.setChannelid = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional uint64 remainDiamond = 5;
 * @return {number}
 */
proto.userProxy.CallReady.prototype.getRemaindiamond = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.userProxy.CallReady} returns this
 */
proto.userProxy.CallReady.prototype.setRemaindiamond = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.userProxy.AddTimeGift.prototype.toObject = function(opt_includeInstance) {
  return proto.userProxy.AddTimeGift.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.userProxy.AddTimeGift} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.userProxy.AddTimeGift.toObject = function(includeInstance, msg) {
  var f, obj = {
    giftid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    token: jspb.Message.getFieldWithDefault(msg, 2, ""),
    duration: jspb.Message.getFieldWithDefault(msg, 3, 0),
    endtimestamp: jspb.Message.getFieldWithDefault(msg, 4, 0),
    channelid: jspb.Message.getFieldWithDefault(msg, 5, ""),
    issender: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    giftnum: jspb.Message.getFieldWithDefault(msg, 7, 0),
    iconurl: jspb.Message.getFieldWithDefault(msg, 8, ""),
    svgaurl: jspb.Message.getFieldWithDefault(msg, 9, ""),
    senderavatar: jspb.Message.getFieldWithDefault(msg, 10, ""),
    receiveravatar: jspb.Message.getFieldWithDefault(msg, 11, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.userProxy.AddTimeGift}
 */
proto.userProxy.AddTimeGift.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.userProxy.AddTimeGift;
  return proto.userProxy.AddTimeGift.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.userProxy.AddTimeGift} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.userProxy.AddTimeGift}
 */
proto.userProxy.AddTimeGift.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGiftid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDuration(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setEndtimestamp(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setChannelid(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIssender(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGiftnum(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setIconurl(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setSvgaurl(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setSenderavatar(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setReceiveravatar(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.userProxy.AddTimeGift.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.userProxy.AddTimeGift.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.userProxy.AddTimeGift} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.userProxy.AddTimeGift.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGiftid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDuration();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getEndtimestamp();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getChannelid();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getIssender();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getGiftnum();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = message.getIconurl();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getSvgaurl();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getSenderavatar();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getReceiveravatar();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
};


/**
 * optional uint32 giftId = 1;
 * @return {number}
 */
proto.userProxy.AddTimeGift.prototype.getGiftid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.userProxy.AddTimeGift} returns this
 */
proto.userProxy.AddTimeGift.prototype.setGiftid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string token = 2;
 * @return {string}
 */
proto.userProxy.AddTimeGift.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.userProxy.AddTimeGift} returns this
 */
proto.userProxy.AddTimeGift.prototype.setToken = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint32 duration = 3;
 * @return {number}
 */
proto.userProxy.AddTimeGift.prototype.getDuration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.userProxy.AddTimeGift} returns this
 */
proto.userProxy.AddTimeGift.prototype.setDuration = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 endTimestamp = 4;
 * @return {number}
 */
proto.userProxy.AddTimeGift.prototype.getEndtimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.userProxy.AddTimeGift} returns this
 */
proto.userProxy.AddTimeGift.prototype.setEndtimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string channelId = 5;
 * @return {string}
 */
proto.userProxy.AddTimeGift.prototype.getChannelid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.userProxy.AddTimeGift} returns this
 */
proto.userProxy.AddTimeGift.prototype.setChannelid = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional bool isSender = 6;
 * @return {boolean}
 */
proto.userProxy.AddTimeGift.prototype.getIssender = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.userProxy.AddTimeGift} returns this
 */
proto.userProxy.AddTimeGift.prototype.setIssender = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional uint32 giftNum = 7;
 * @return {number}
 */
proto.userProxy.AddTimeGift.prototype.getGiftnum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.userProxy.AddTimeGift} returns this
 */
proto.userProxy.AddTimeGift.prototype.setGiftnum = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional string iconUrl = 8;
 * @return {string}
 */
proto.userProxy.AddTimeGift.prototype.getIconurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.userProxy.AddTimeGift} returns this
 */
proto.userProxy.AddTimeGift.prototype.setIconurl = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string svgaUrl = 9;
 * @return {string}
 */
proto.userProxy.AddTimeGift.prototype.getSvgaurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.userProxy.AddTimeGift} returns this
 */
proto.userProxy.AddTimeGift.prototype.setSvgaurl = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string senderAvatar = 10;
 * @return {string}
 */
proto.userProxy.AddTimeGift.prototype.getSenderavatar = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.userProxy.AddTimeGift} returns this
 */
proto.userProxy.AddTimeGift.prototype.setSenderavatar = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string receiverAvatar = 11;
 * @return {string}
 */
proto.userProxy.AddTimeGift.prototype.getReceiveravatar = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.userProxy.AddTimeGift} returns this
 */
proto.userProxy.AddTimeGift.prototype.setReceiveravatar = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.userProxy.AddTimeFree.prototype.toObject = function(opt_includeInstance) {
  return proto.userProxy.AddTimeFree.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.userProxy.AddTimeFree} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.userProxy.AddTimeFree.toObject = function(includeInstance, msg) {
  var f, obj = {
    token: jspb.Message.getFieldWithDefault(msg, 1, ""),
    duration: jspb.Message.getFieldWithDefault(msg, 2, 0),
    endtimestamp: jspb.Message.getFieldWithDefault(msg, 3, 0),
    channelid: jspb.Message.getFieldWithDefault(msg, 4, ""),
    senderagoraid: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.userProxy.AddTimeFree}
 */
proto.userProxy.AddTimeFree.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.userProxy.AddTimeFree;
  return proto.userProxy.AddTimeFree.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.userProxy.AddTimeFree} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.userProxy.AddTimeFree}
 */
proto.userProxy.AddTimeFree.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDuration(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setEndtimestamp(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setChannelid(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSenderagoraid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.userProxy.AddTimeFree.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.userProxy.AddTimeFree.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.userProxy.AddTimeFree} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.userProxy.AddTimeFree.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDuration();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getEndtimestamp();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getChannelid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getSenderagoraid();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
};


/**
 * optional string token = 1;
 * @return {string}
 */
proto.userProxy.AddTimeFree.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.userProxy.AddTimeFree} returns this
 */
proto.userProxy.AddTimeFree.prototype.setToken = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 duration = 2;
 * @return {number}
 */
proto.userProxy.AddTimeFree.prototype.getDuration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.userProxy.AddTimeFree} returns this
 */
proto.userProxy.AddTimeFree.prototype.setDuration = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 endTimestamp = 3;
 * @return {number}
 */
proto.userProxy.AddTimeFree.prototype.getEndtimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.userProxy.AddTimeFree} returns this
 */
proto.userProxy.AddTimeFree.prototype.setEndtimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string channelId = 4;
 * @return {string}
 */
proto.userProxy.AddTimeFree.prototype.getChannelid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.userProxy.AddTimeFree} returns this
 */
proto.userProxy.AddTimeFree.prototype.setChannelid = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional uint32 senderAgoraId = 5;
 * @return {number}
 */
proto.userProxy.AddTimeFree.prototype.getSenderagoraid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.userProxy.AddTimeFree} returns this
 */
proto.userProxy.AddTimeFree.prototype.setSenderagoraid = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.userProxy.ConnectsQuit.prototype.toObject = function(opt_includeInstance) {
  return proto.userProxy.ConnectsQuit.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.userProxy.ConnectsQuit} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.userProxy.ConnectsQuit.toObject = function(includeInstance, msg) {
  var f, obj = {
    fromUserId: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.userProxy.ConnectsQuit}
 */
proto.userProxy.ConnectsQuit.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.userProxy.ConnectsQuit;
  return proto.userProxy.ConnectsQuit.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.userProxy.ConnectsQuit} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.userProxy.ConnectsQuit}
 */
proto.userProxy.ConnectsQuit.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFromUserId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.userProxy.ConnectsQuit.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.userProxy.ConnectsQuit.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.userProxy.ConnectsQuit} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.userProxy.ConnectsQuit.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFromUserId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 from_user_id = 1;
 * @return {number}
 */
proto.userProxy.ConnectsQuit.prototype.getFromUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.userProxy.ConnectsQuit} returns this
 */
proto.userProxy.ConnectsQuit.prototype.setFromUserId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.userProxy.ConnectStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.userProxy.ConnectStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.userProxy.ConnectStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.userProxy.ConnectStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    fromUserId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    userDiamonds: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    diamondsEnough: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.userProxy.ConnectStatus}
 */
proto.userProxy.ConnectStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.userProxy.ConnectStatus;
  return proto.userProxy.ConnectStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.userProxy.ConnectStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.userProxy.ConnectStatus}
 */
proto.userProxy.ConnectStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFromUserId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setUserDiamonds(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDiamondsEnough(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.userProxy.ConnectStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.userProxy.ConnectStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.userProxy.ConnectStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.userProxy.ConnectStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFromUserId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getUserDiamonds();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getDiamondsEnough();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional uint64 from_user_id = 1;
 * @return {number}
 */
proto.userProxy.ConnectStatus.prototype.getFromUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.userProxy.ConnectStatus} returns this
 */
proto.userProxy.ConnectStatus.prototype.setFromUserId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional float user_diamonds = 2;
 * @return {number}
 */
proto.userProxy.ConnectStatus.prototype.getUserDiamonds = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.userProxy.ConnectStatus} returns this
 */
proto.userProxy.ConnectStatus.prototype.setUserDiamonds = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional bool diamonds_enough = 3;
 * @return {boolean}
 */
proto.userProxy.ConnectStatus.prototype.getDiamondsEnough = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.userProxy.ConnectStatus} returns this
 */
proto.userProxy.ConnectStatus.prototype.setDiamondsEnough = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.userProxy.ConnectsCall.prototype.toObject = function(opt_includeInstance) {
  return proto.userProxy.ConnectsCall.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.userProxy.ConnectsCall} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.userProxy.ConnectsCall.toObject = function(includeInstance, msg) {
  var f, obj = {
    fromUserId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    rongRoomName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    isJoin: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.userProxy.ConnectsCall}
 */
proto.userProxy.ConnectsCall.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.userProxy.ConnectsCall;
  return proto.userProxy.ConnectsCall.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.userProxy.ConnectsCall} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.userProxy.ConnectsCall}
 */
proto.userProxy.ConnectsCall.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFromUserId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRongRoomName(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsJoin(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.userProxy.ConnectsCall.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.userProxy.ConnectsCall.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.userProxy.ConnectsCall} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.userProxy.ConnectsCall.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFromUserId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getRongRoomName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getIsJoin();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional uint64 from_user_id = 1;
 * @return {number}
 */
proto.userProxy.ConnectsCall.prototype.getFromUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.userProxy.ConnectsCall} returns this
 */
proto.userProxy.ConnectsCall.prototype.setFromUserId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string rong_room_name = 2;
 * @return {string}
 */
proto.userProxy.ConnectsCall.prototype.getRongRoomName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.userProxy.ConnectsCall} returns this
 */
proto.userProxy.ConnectsCall.prototype.setRongRoomName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool is_join = 3;
 * @return {boolean}
 */
proto.userProxy.ConnectsCall.prototype.getIsJoin = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.userProxy.ConnectsCall} returns this
 */
proto.userProxy.ConnectsCall.prototype.setIsJoin = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.userProxy.ConnectCommon.prototype.toObject = function(opt_includeInstance) {
  return proto.userProxy.ConnectCommon.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.userProxy.ConnectCommon} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.userProxy.ConnectCommon.toObject = function(includeInstance, msg) {
  var f, obj = {
    rongRoomName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    fromUserId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    extra: jspb.Message.getFieldWithDefault(msg, 3, ""),
    message: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.userProxy.ConnectCommon}
 */
proto.userProxy.ConnectCommon.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.userProxy.ConnectCommon;
  return proto.userProxy.ConnectCommon.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.userProxy.ConnectCommon} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.userProxy.ConnectCommon}
 */
proto.userProxy.ConnectCommon.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRongRoomName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFromUserId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setExtra(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.userProxy.ConnectCommon.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.userProxy.ConnectCommon.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.userProxy.ConnectCommon} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.userProxy.ConnectCommon.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRongRoomName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFromUserId();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getExtra();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string rong_room_name = 1;
 * @return {string}
 */
proto.userProxy.ConnectCommon.prototype.getRongRoomName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.userProxy.ConnectCommon} returns this
 */
proto.userProxy.ConnectCommon.prototype.setRongRoomName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 from_user_id = 2;
 * @return {number}
 */
proto.userProxy.ConnectCommon.prototype.getFromUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.userProxy.ConnectCommon} returns this
 */
proto.userProxy.ConnectCommon.prototype.setFromUserId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string extra = 3;
 * @return {string}
 */
proto.userProxy.ConnectCommon.prototype.getExtra = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.userProxy.ConnectCommon} returns this
 */
proto.userProxy.ConnectCommon.prototype.setExtra = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string message = 4;
 * @return {string}
 */
proto.userProxy.ConnectCommon.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.userProxy.ConnectCommon} returns this
 */
proto.userProxy.ConnectCommon.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.userProxy.RecallWindow.prototype.toObject = function(opt_includeInstance) {
  return proto.userProxy.RecallWindow.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.userProxy.RecallWindow} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.userProxy.RecallWindow.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.userProxy.RecallWindow}
 */
proto.userProxy.RecallWindow.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.userProxy.RecallWindow;
  return proto.userProxy.RecallWindow.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.userProxy.RecallWindow} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.userProxy.RecallWindow}
 */
proto.userProxy.RecallWindow.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.userProxy.RecallWindow.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.userProxy.RecallWindow.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.userProxy.RecallWindow} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.userProxy.RecallWindow.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.userProxy.Video.prototype.toObject = function(opt_includeInstance) {
  return proto.userProxy.Video.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.userProxy.Video} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.userProxy.Video.toObject = function(includeInstance, msg) {
  var f, obj = {
    videouniqueid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    channelid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    localagoraid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    remoteagoraid: jspb.Message.getFieldWithDefault(msg, 4, 0),
    agoratoken: jspb.Message.getFieldWithDefault(msg, 5, ""),
    senduserid: jspb.Message.getFieldWithDefault(msg, 6, ""),
    receiveuserid: jspb.Message.getFieldWithDefault(msg, 7, ""),
    status: jspb.Message.getFieldWithDefault(msg, 8, 0),
    diamondbalance: jspb.Message.getFieldWithDefault(msg, 9, 0),
    senduser: (f = msg.getSenduser()) && proto.userProxy.User.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.userProxy.Video}
 */
proto.userProxy.Video.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.userProxy.Video;
  return proto.userProxy.Video.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.userProxy.Video} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.userProxy.Video}
 */
proto.userProxy.Video.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setVideouniqueid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setChannelid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLocalagoraid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRemoteagoraid(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setAgoratoken(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setSenduserid(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setReceiveuserid(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setStatus(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDiamondbalance(value);
      break;
    case 10:
      var value = new proto.userProxy.User;
      reader.readMessage(value,proto.userProxy.User.deserializeBinaryFromReader);
      msg.setSenduser(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.userProxy.Video.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.userProxy.Video.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.userProxy.Video} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.userProxy.Video.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVideouniqueid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getChannelid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLocalagoraid();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getRemoteagoraid();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getAgoratoken();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getSenduserid();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getReceiveuserid();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0) {
    writer.writeUint32(
      8,
      f
    );
  }
  f = message.getDiamondbalance();
  if (f !== 0) {
    writer.writeUint32(
      9,
      f
    );
  }
  f = message.getSenduser();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.userProxy.User.serializeBinaryToWriter
    );
  }
};


/**
 * optional string videoUniqueId = 1;
 * @return {string}
 */
proto.userProxy.Video.prototype.getVideouniqueid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.userProxy.Video} returns this
 */
proto.userProxy.Video.prototype.setVideouniqueid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string channelId = 2;
 * @return {string}
 */
proto.userProxy.Video.prototype.getChannelid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.userProxy.Video} returns this
 */
proto.userProxy.Video.prototype.setChannelid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint32 localAgoraId = 3;
 * @return {number}
 */
proto.userProxy.Video.prototype.getLocalagoraid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.userProxy.Video} returns this
 */
proto.userProxy.Video.prototype.setLocalagoraid = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 remoteAgoraId = 4;
 * @return {number}
 */
proto.userProxy.Video.prototype.getRemoteagoraid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.userProxy.Video} returns this
 */
proto.userProxy.Video.prototype.setRemoteagoraid = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string agoraToken = 5;
 * @return {string}
 */
proto.userProxy.Video.prototype.getAgoratoken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.userProxy.Video} returns this
 */
proto.userProxy.Video.prototype.setAgoratoken = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string sendUserId = 6;
 * @return {string}
 */
proto.userProxy.Video.prototype.getSenduserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.userProxy.Video} returns this
 */
proto.userProxy.Video.prototype.setSenduserid = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string receiveUserId = 7;
 * @return {string}
 */
proto.userProxy.Video.prototype.getReceiveuserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.userProxy.Video} returns this
 */
proto.userProxy.Video.prototype.setReceiveuserid = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional uint32 status = 8;
 * @return {number}
 */
proto.userProxy.Video.prototype.getStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.userProxy.Video} returns this
 */
proto.userProxy.Video.prototype.setStatus = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional uint32 diamondBalance = 9;
 * @return {number}
 */
proto.userProxy.Video.prototype.getDiamondbalance = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.userProxy.Video} returns this
 */
proto.userProxy.Video.prototype.setDiamondbalance = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional User sendUser = 10;
 * @return {?proto.userProxy.User}
 */
proto.userProxy.Video.prototype.getSenduser = function() {
  return /** @type{?proto.userProxy.User} */ (
    jspb.Message.getWrapperField(this, proto.userProxy.User, 10));
};


/**
 * @param {?proto.userProxy.User|undefined} value
 * @return {!proto.userProxy.Video} returns this
*/
proto.userProxy.Video.prototype.setSenduser = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.userProxy.Video} returns this
 */
proto.userProxy.Video.prototype.clearSenduser = function() {
  return this.setSenduser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.userProxy.Video.prototype.hasSenduser = function() {
  return jspb.Message.getField(this, 10) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.userProxy.VideoCallReady.prototype.toObject = function(opt_includeInstance) {
  return proto.userProxy.VideoCallReady.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.userProxy.VideoCallReady} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.userProxy.VideoCallReady.toObject = function(includeInstance, msg) {
  var f, obj = {
    starttimestamp: jspb.Message.getFieldWithDefault(msg, 1, 0),
    endtimestamp: jspb.Message.getFieldWithDefault(msg, 2, 0),
    callduration: jspb.Message.getFieldWithDefault(msg, 3, 0),
    channelid: jspb.Message.getFieldWithDefault(msg, 4, ""),
    remaindiamond: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.userProxy.VideoCallReady}
 */
proto.userProxy.VideoCallReady.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.userProxy.VideoCallReady;
  return proto.userProxy.VideoCallReady.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.userProxy.VideoCallReady} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.userProxy.VideoCallReady}
 */
proto.userProxy.VideoCallReady.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setStarttimestamp(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setEndtimestamp(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCallduration(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setChannelid(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRemaindiamond(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.userProxy.VideoCallReady.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.userProxy.VideoCallReady.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.userProxy.VideoCallReady} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.userProxy.VideoCallReady.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStarttimestamp();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getEndtimestamp();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getCallduration();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getChannelid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getRemaindiamond();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
};


/**
 * optional uint64 startTimestamp = 1;
 * @return {number}
 */
proto.userProxy.VideoCallReady.prototype.getStarttimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.userProxy.VideoCallReady} returns this
 */
proto.userProxy.VideoCallReady.prototype.setStarttimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 endTimestamp = 2;
 * @return {number}
 */
proto.userProxy.VideoCallReady.prototype.getEndtimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.userProxy.VideoCallReady} returns this
 */
proto.userProxy.VideoCallReady.prototype.setEndtimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 callDuration = 3;
 * @return {number}
 */
proto.userProxy.VideoCallReady.prototype.getCallduration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.userProxy.VideoCallReady} returns this
 */
proto.userProxy.VideoCallReady.prototype.setCallduration = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string channelId = 4;
 * @return {string}
 */
proto.userProxy.VideoCallReady.prototype.getChannelid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.userProxy.VideoCallReady} returns this
 */
proto.userProxy.VideoCallReady.prototype.setChannelid = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional uint64 remainDiamond = 5;
 * @return {number}
 */
proto.userProxy.VideoCallReady.prototype.getRemaindiamond = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.userProxy.VideoCallReady} returns this
 */
proto.userProxy.VideoCallReady.prototype.setRemaindiamond = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.userProxy.LikeEach.prototype.toObject = function(opt_includeInstance) {
  return proto.userProxy.LikeEach.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.userProxy.LikeEach} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.userProxy.LikeEach.toObject = function(includeInstance, msg) {
  var f, obj = {
    remoteuserid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.userProxy.LikeEach}
 */
proto.userProxy.LikeEach.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.userProxy.LikeEach;
  return proto.userProxy.LikeEach.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.userProxy.LikeEach} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.userProxy.LikeEach}
 */
proto.userProxy.LikeEach.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRemoteuserid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.userProxy.LikeEach.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.userProxy.LikeEach.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.userProxy.LikeEach} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.userProxy.LikeEach.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRemoteuserid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string remoteUserId = 1;
 * @return {string}
 */
proto.userProxy.LikeEach.prototype.getRemoteuserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.userProxy.LikeEach} returns this
 */
proto.userProxy.LikeEach.prototype.setRemoteuserid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.userProxy.LikeMe.prototype.toObject = function(opt_includeInstance) {
  return proto.userProxy.LikeMe.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.userProxy.LikeMe} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.userProxy.LikeMe.toObject = function(includeInstance, msg) {
  var f, obj = {
    remoteuserid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    remotenick: jspb.Message.getFieldWithDefault(msg, 2, ""),
    channelid: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.userProxy.LikeMe}
 */
proto.userProxy.LikeMe.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.userProxy.LikeMe;
  return proto.userProxy.LikeMe.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.userProxy.LikeMe} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.userProxy.LikeMe}
 */
proto.userProxy.LikeMe.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRemoteuserid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRemotenick(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setChannelid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.userProxy.LikeMe.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.userProxy.LikeMe.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.userProxy.LikeMe} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.userProxy.LikeMe.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRemoteuserid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRemotenick();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getChannelid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string remoteUserId = 1;
 * @return {string}
 */
proto.userProxy.LikeMe.prototype.getRemoteuserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.userProxy.LikeMe} returns this
 */
proto.userProxy.LikeMe.prototype.setRemoteuserid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string remoteNick = 2;
 * @return {string}
 */
proto.userProxy.LikeMe.prototype.getRemotenick = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.userProxy.LikeMe} returns this
 */
proto.userProxy.LikeMe.prototype.setRemotenick = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string channelId = 3;
 * @return {string}
 */
proto.userProxy.LikeMe.prototype.getChannelid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.userProxy.LikeMe} returns this
 */
proto.userProxy.LikeMe.prototype.setChannelid = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.userProxy.DailyInAppDiamond.prototype.toObject = function(opt_includeInstance) {
  return proto.userProxy.DailyInAppDiamond.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.userProxy.DailyInAppDiamond} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.userProxy.DailyInAppDiamond.toObject = function(includeInstance, msg) {
  var f, obj = {
    diamondnum: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.userProxy.DailyInAppDiamond}
 */
proto.userProxy.DailyInAppDiamond.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.userProxy.DailyInAppDiamond;
  return proto.userProxy.DailyInAppDiamond.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.userProxy.DailyInAppDiamond} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.userProxy.DailyInAppDiamond}
 */
proto.userProxy.DailyInAppDiamond.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDiamondnum(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.userProxy.DailyInAppDiamond.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.userProxy.DailyInAppDiamond.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.userProxy.DailyInAppDiamond} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.userProxy.DailyInAppDiamond.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDiamondnum();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 diamondNum = 1;
 * @return {number}
 */
proto.userProxy.DailyInAppDiamond.prototype.getDiamondnum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.userProxy.DailyInAppDiamond} returns this
 */
proto.userProxy.DailyInAppDiamond.prototype.setDiamondnum = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.userProxy.GlobalGiftBanner.prototype.toObject = function(opt_includeInstance) {
  return proto.userProxy.GlobalGiftBanner.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.userProxy.GlobalGiftBanner} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.userProxy.GlobalGiftBanner.toObject = function(includeInstance, msg) {
  var f, obj = {
    bannerlevel: jspb.Message.getFieldWithDefault(msg, 1, 0),
    giftid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    giftnum: jspb.Message.getFieldWithDefault(msg, 3, 0),
    senduserid: jspb.Message.getFieldWithDefault(msg, 4, ""),
    receiveuserid: jspb.Message.getFieldWithDefault(msg, 5, ""),
    groupid: jspb.Message.getFieldWithDefault(msg, 6, ""),
    sendusercode: jspb.Message.getFieldWithDefault(msg, 7, ""),
    senduseravatar: jspb.Message.getFieldWithDefault(msg, 8, ""),
    sendusernick: jspb.Message.getFieldWithDefault(msg, 9, ""),
    receiveusernick: jspb.Message.getFieldWithDefault(msg, 10, ""),
    giftpicurl: jspb.Message.getFieldWithDefault(msg, 11, ""),
    svip: (f = msg.getSvip()) && proto.userProxy.Svip.toObject(includeInstance, f),
    receivesvip: (f = msg.getReceivesvip()) && proto.userProxy.Svip.toObject(includeInstance, f),
    bannertype: jspb.Message.getFieldWithDefault(msg, 14, 0),
    cplevel: jspb.Message.getFieldWithDefault(msg, 15, 0),
    receiveuseravatar: jspb.Message.getFieldWithDefault(msg, 16, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.userProxy.GlobalGiftBanner}
 */
proto.userProxy.GlobalGiftBanner.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.userProxy.GlobalGiftBanner;
  return proto.userProxy.GlobalGiftBanner.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.userProxy.GlobalGiftBanner} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.userProxy.GlobalGiftBanner}
 */
proto.userProxy.GlobalGiftBanner.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBannerlevel(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGiftid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGiftnum(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSenduserid(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setReceiveuserid(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroupid(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setSendusercode(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setSenduseravatar(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setSendusernick(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setReceiveusernick(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setGiftpicurl(value);
      break;
    case 12:
      var value = new proto.userProxy.Svip;
      reader.readMessage(value,proto.userProxy.Svip.deserializeBinaryFromReader);
      msg.setSvip(value);
      break;
    case 13:
      var value = new proto.userProxy.Svip;
      reader.readMessage(value,proto.userProxy.Svip.deserializeBinaryFromReader);
      msg.setReceivesvip(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBannertype(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCplevel(value);
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.setReceiveuseravatar(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.userProxy.GlobalGiftBanner.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.userProxy.GlobalGiftBanner.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.userProxy.GlobalGiftBanner} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.userProxy.GlobalGiftBanner.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBannerlevel();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getGiftid();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getGiftnum();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getSenduserid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getReceiveuserid();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getGroupid();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getSendusercode();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getSenduseravatar();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getSendusernick();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getReceiveusernick();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getGiftpicurl();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getSvip();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.userProxy.Svip.serializeBinaryToWriter
    );
  }
  f = message.getReceivesvip();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.userProxy.Svip.serializeBinaryToWriter
    );
  }
  f = message.getBannertype();
  if (f !== 0) {
    writer.writeUint32(
      14,
      f
    );
  }
  f = message.getCplevel();
  if (f !== 0) {
    writer.writeUint32(
      15,
      f
    );
  }
  f = message.getReceiveuseravatar();
  if (f.length > 0) {
    writer.writeString(
      16,
      f
    );
  }
};


/**
 * optional uint32 bannerLevel = 1;
 * @return {number}
 */
proto.userProxy.GlobalGiftBanner.prototype.getBannerlevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.userProxy.GlobalGiftBanner} returns this
 */
proto.userProxy.GlobalGiftBanner.prototype.setBannerlevel = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 giftId = 2;
 * @return {number}
 */
proto.userProxy.GlobalGiftBanner.prototype.getGiftid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.userProxy.GlobalGiftBanner} returns this
 */
proto.userProxy.GlobalGiftBanner.prototype.setGiftid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 giftNum = 3;
 * @return {number}
 */
proto.userProxy.GlobalGiftBanner.prototype.getGiftnum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.userProxy.GlobalGiftBanner} returns this
 */
proto.userProxy.GlobalGiftBanner.prototype.setGiftnum = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string sendUserId = 4;
 * @return {string}
 */
proto.userProxy.GlobalGiftBanner.prototype.getSenduserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.userProxy.GlobalGiftBanner} returns this
 */
proto.userProxy.GlobalGiftBanner.prototype.setSenduserid = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string receiveUserId = 5;
 * @return {string}
 */
proto.userProxy.GlobalGiftBanner.prototype.getReceiveuserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.userProxy.GlobalGiftBanner} returns this
 */
proto.userProxy.GlobalGiftBanner.prototype.setReceiveuserid = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string groupId = 6;
 * @return {string}
 */
proto.userProxy.GlobalGiftBanner.prototype.getGroupid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.userProxy.GlobalGiftBanner} returns this
 */
proto.userProxy.GlobalGiftBanner.prototype.setGroupid = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string sendUserCode = 7;
 * @return {string}
 */
proto.userProxy.GlobalGiftBanner.prototype.getSendusercode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.userProxy.GlobalGiftBanner} returns this
 */
proto.userProxy.GlobalGiftBanner.prototype.setSendusercode = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string sendUserAvatar = 8;
 * @return {string}
 */
proto.userProxy.GlobalGiftBanner.prototype.getSenduseravatar = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.userProxy.GlobalGiftBanner} returns this
 */
proto.userProxy.GlobalGiftBanner.prototype.setSenduseravatar = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string sendUserNick = 9;
 * @return {string}
 */
proto.userProxy.GlobalGiftBanner.prototype.getSendusernick = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.userProxy.GlobalGiftBanner} returns this
 */
proto.userProxy.GlobalGiftBanner.prototype.setSendusernick = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string receiveUserNick = 10;
 * @return {string}
 */
proto.userProxy.GlobalGiftBanner.prototype.getReceiveusernick = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.userProxy.GlobalGiftBanner} returns this
 */
proto.userProxy.GlobalGiftBanner.prototype.setReceiveusernick = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string giftPicUrl = 11;
 * @return {string}
 */
proto.userProxy.GlobalGiftBanner.prototype.getGiftpicurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.userProxy.GlobalGiftBanner} returns this
 */
proto.userProxy.GlobalGiftBanner.prototype.setGiftpicurl = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional Svip svip = 12;
 * @return {?proto.userProxy.Svip}
 */
proto.userProxy.GlobalGiftBanner.prototype.getSvip = function() {
  return /** @type{?proto.userProxy.Svip} */ (
    jspb.Message.getWrapperField(this, proto.userProxy.Svip, 12));
};


/**
 * @param {?proto.userProxy.Svip|undefined} value
 * @return {!proto.userProxy.GlobalGiftBanner} returns this
*/
proto.userProxy.GlobalGiftBanner.prototype.setSvip = function(value) {
  return jspb.Message.setWrapperField(this, 12, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.userProxy.GlobalGiftBanner} returns this
 */
proto.userProxy.GlobalGiftBanner.prototype.clearSvip = function() {
  return this.setSvip(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.userProxy.GlobalGiftBanner.prototype.hasSvip = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional Svip receiveSvip = 13;
 * @return {?proto.userProxy.Svip}
 */
proto.userProxy.GlobalGiftBanner.prototype.getReceivesvip = function() {
  return /** @type{?proto.userProxy.Svip} */ (
    jspb.Message.getWrapperField(this, proto.userProxy.Svip, 13));
};


/**
 * @param {?proto.userProxy.Svip|undefined} value
 * @return {!proto.userProxy.GlobalGiftBanner} returns this
*/
proto.userProxy.GlobalGiftBanner.prototype.setReceivesvip = function(value) {
  return jspb.Message.setWrapperField(this, 13, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.userProxy.GlobalGiftBanner} returns this
 */
proto.userProxy.GlobalGiftBanner.prototype.clearReceivesvip = function() {
  return this.setReceivesvip(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.userProxy.GlobalGiftBanner.prototype.hasReceivesvip = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional uint32 bannerType = 14;
 * @return {number}
 */
proto.userProxy.GlobalGiftBanner.prototype.getBannertype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/**
 * @param {number} value
 * @return {!proto.userProxy.GlobalGiftBanner} returns this
 */
proto.userProxy.GlobalGiftBanner.prototype.setBannertype = function(value) {
  return jspb.Message.setProto3IntField(this, 14, value);
};


/**
 * optional uint32 cpLevel = 15;
 * @return {number}
 */
proto.userProxy.GlobalGiftBanner.prototype.getCplevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/**
 * @param {number} value
 * @return {!proto.userProxy.GlobalGiftBanner} returns this
 */
proto.userProxy.GlobalGiftBanner.prototype.setCplevel = function(value) {
  return jspb.Message.setProto3IntField(this, 15, value);
};


/**
 * optional string receiveUserAvatar = 16;
 * @return {string}
 */
proto.userProxy.GlobalGiftBanner.prototype.getReceiveuseravatar = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};


/**
 * @param {string} value
 * @return {!proto.userProxy.GlobalGiftBanner} returns this
 */
proto.userProxy.GlobalGiftBanner.prototype.setReceiveuseravatar = function(value) {
  return jspb.Message.setProto3StringField(this, 16, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.userProxy.GlobalGiftBannerRsp.prototype.toObject = function(opt_includeInstance) {
  return proto.userProxy.GlobalGiftBannerRsp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.userProxy.GlobalGiftBannerRsp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.userProxy.GlobalGiftBannerRsp.toObject = function(includeInstance, msg) {
  var f, obj = {
    bannerlevel: jspb.Message.getFieldWithDefault(msg, 1, 0),
    giftid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    giftnum: jspb.Message.getFieldWithDefault(msg, 3, 0),
    senduserid: jspb.Message.getFieldWithDefault(msg, 4, ""),
    receiveuserid: jspb.Message.getFieldWithDefault(msg, 5, ""),
    groupid: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.userProxy.GlobalGiftBannerRsp}
 */
proto.userProxy.GlobalGiftBannerRsp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.userProxy.GlobalGiftBannerRsp;
  return proto.userProxy.GlobalGiftBannerRsp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.userProxy.GlobalGiftBannerRsp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.userProxy.GlobalGiftBannerRsp}
 */
proto.userProxy.GlobalGiftBannerRsp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBannerlevel(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGiftid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGiftnum(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSenduserid(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setReceiveuserid(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroupid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.userProxy.GlobalGiftBannerRsp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.userProxy.GlobalGiftBannerRsp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.userProxy.GlobalGiftBannerRsp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.userProxy.GlobalGiftBannerRsp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBannerlevel();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getGiftid();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getGiftnum();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getSenduserid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getReceiveuserid();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getGroupid();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional uint32 bannerLevel = 1;
 * @return {number}
 */
proto.userProxy.GlobalGiftBannerRsp.prototype.getBannerlevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.userProxy.GlobalGiftBannerRsp} returns this
 */
proto.userProxy.GlobalGiftBannerRsp.prototype.setBannerlevel = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 giftId = 2;
 * @return {number}
 */
proto.userProxy.GlobalGiftBannerRsp.prototype.getGiftid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.userProxy.GlobalGiftBannerRsp} returns this
 */
proto.userProxy.GlobalGiftBannerRsp.prototype.setGiftid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 giftNum = 3;
 * @return {number}
 */
proto.userProxy.GlobalGiftBannerRsp.prototype.getGiftnum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.userProxy.GlobalGiftBannerRsp} returns this
 */
proto.userProxy.GlobalGiftBannerRsp.prototype.setGiftnum = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string sendUserId = 4;
 * @return {string}
 */
proto.userProxy.GlobalGiftBannerRsp.prototype.getSenduserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.userProxy.GlobalGiftBannerRsp} returns this
 */
proto.userProxy.GlobalGiftBannerRsp.prototype.setSenduserid = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string receiveUserId = 5;
 * @return {string}
 */
proto.userProxy.GlobalGiftBannerRsp.prototype.getReceiveuserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.userProxy.GlobalGiftBannerRsp} returns this
 */
proto.userProxy.GlobalGiftBannerRsp.prototype.setReceiveuserid = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string groupId = 6;
 * @return {string}
 */
proto.userProxy.GlobalGiftBannerRsp.prototype.getGroupid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.userProxy.GlobalGiftBannerRsp} returns this
 */
proto.userProxy.GlobalGiftBannerRsp.prototype.setGroupid = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.userProxy.LuckyWheel.prototype.toObject = function(opt_includeInstance) {
  return proto.userProxy.LuckyWheel.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.userProxy.LuckyWheel} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.userProxy.LuckyWheel.toObject = function(includeInstance, msg) {
  var f, obj = {
    groupid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.userProxy.LuckyWheel}
 */
proto.userProxy.LuckyWheel.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.userProxy.LuckyWheel;
  return proto.userProxy.LuckyWheel.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.userProxy.LuckyWheel} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.userProxy.LuckyWheel}
 */
proto.userProxy.LuckyWheel.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroupid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.userProxy.LuckyWheel.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.userProxy.LuckyWheel.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.userProxy.LuckyWheel} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.userProxy.LuckyWheel.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGroupid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getType();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional string groupId = 1;
 * @return {string}
 */
proto.userProxy.LuckyWheel.prototype.getGroupid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.userProxy.LuckyWheel} returns this
 */
proto.userProxy.LuckyWheel.prototype.setGroupid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 type = 2;
 * @return {number}
 */
proto.userProxy.LuckyWheel.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.userProxy.LuckyWheel} returns this
 */
proto.userProxy.LuckyWheel.prototype.setType = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.userProxy.LuckyWheelBanner.prototype.toObject = function(opt_includeInstance) {
  return proto.userProxy.LuckyWheelBanner.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.userProxy.LuckyWheelBanner} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.userProxy.LuckyWheelBanner.toObject = function(includeInstance, msg) {
  var f, obj = {
    diamondnum: jspb.Message.getFieldWithDefault(msg, 1, 0),
    senduserid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    groupid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    nick: jspb.Message.getFieldWithDefault(msg, 4, ""),
    code: jspb.Message.getFieldWithDefault(msg, 5, ""),
    avatar: jspb.Message.getFieldWithDefault(msg, 6, ""),
    svip: (f = msg.getSvip()) && proto.userProxy.Svip.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.userProxy.LuckyWheelBanner}
 */
proto.userProxy.LuckyWheelBanner.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.userProxy.LuckyWheelBanner;
  return proto.userProxy.LuckyWheelBanner.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.userProxy.LuckyWheelBanner} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.userProxy.LuckyWheelBanner}
 */
proto.userProxy.LuckyWheelBanner.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDiamondnum(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSenduserid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroupid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setNick(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setCode(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setAvatar(value);
      break;
    case 7:
      var value = new proto.userProxy.Svip;
      reader.readMessage(value,proto.userProxy.Svip.deserializeBinaryFromReader);
      msg.setSvip(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.userProxy.LuckyWheelBanner.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.userProxy.LuckyWheelBanner.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.userProxy.LuckyWheelBanner} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.userProxy.LuckyWheelBanner.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDiamondnum();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getSenduserid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getGroupid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getNick();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getCode();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getAvatar();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getSvip();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.userProxy.Svip.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 diamondNum = 1;
 * @return {number}
 */
proto.userProxy.LuckyWheelBanner.prototype.getDiamondnum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.userProxy.LuckyWheelBanner} returns this
 */
proto.userProxy.LuckyWheelBanner.prototype.setDiamondnum = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string sendUserId = 2;
 * @return {string}
 */
proto.userProxy.LuckyWheelBanner.prototype.getSenduserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.userProxy.LuckyWheelBanner} returns this
 */
proto.userProxy.LuckyWheelBanner.prototype.setSenduserid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string groupId = 3;
 * @return {string}
 */
proto.userProxy.LuckyWheelBanner.prototype.getGroupid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.userProxy.LuckyWheelBanner} returns this
 */
proto.userProxy.LuckyWheelBanner.prototype.setGroupid = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string nick = 4;
 * @return {string}
 */
proto.userProxy.LuckyWheelBanner.prototype.getNick = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.userProxy.LuckyWheelBanner} returns this
 */
proto.userProxy.LuckyWheelBanner.prototype.setNick = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string code = 5;
 * @return {string}
 */
proto.userProxy.LuckyWheelBanner.prototype.getCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.userProxy.LuckyWheelBanner} returns this
 */
proto.userProxy.LuckyWheelBanner.prototype.setCode = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string avatar = 6;
 * @return {string}
 */
proto.userProxy.LuckyWheelBanner.prototype.getAvatar = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.userProxy.LuckyWheelBanner} returns this
 */
proto.userProxy.LuckyWheelBanner.prototype.setAvatar = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional Svip svip = 7;
 * @return {?proto.userProxy.Svip}
 */
proto.userProxy.LuckyWheelBanner.prototype.getSvip = function() {
  return /** @type{?proto.userProxy.Svip} */ (
    jspb.Message.getWrapperField(this, proto.userProxy.Svip, 7));
};


/**
 * @param {?proto.userProxy.Svip|undefined} value
 * @return {!proto.userProxy.LuckyWheelBanner} returns this
*/
proto.userProxy.LuckyWheelBanner.prototype.setSvip = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.userProxy.LuckyWheelBanner} returns this
 */
proto.userProxy.LuckyWheelBanner.prototype.clearSvip = function() {
  return this.setSvip(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.userProxy.LuckyWheelBanner.prototype.hasSvip = function() {
  return jspb.Message.getField(this, 7) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.userProxy.LuckyWheelDiamondChange.prototype.toObject = function(opt_includeInstance) {
  return proto.userProxy.LuckyWheelDiamondChange.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.userProxy.LuckyWheelDiamondChange} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.userProxy.LuckyWheelDiamondChange.toObject = function(includeInstance, msg) {
  var f, obj = {
    groupid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.userProxy.LuckyWheelDiamondChange}
 */
proto.userProxy.LuckyWheelDiamondChange.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.userProxy.LuckyWheelDiamondChange;
  return proto.userProxy.LuckyWheelDiamondChange.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.userProxy.LuckyWheelDiamondChange} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.userProxy.LuckyWheelDiamondChange}
 */
proto.userProxy.LuckyWheelDiamondChange.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroupid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.userProxy.LuckyWheelDiamondChange.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.userProxy.LuckyWheelDiamondChange.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.userProxy.LuckyWheelDiamondChange} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.userProxy.LuckyWheelDiamondChange.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGroupid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string groupId = 1;
 * @return {string}
 */
proto.userProxy.LuckyWheelDiamondChange.prototype.getGroupid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.userProxy.LuckyWheelDiamondChange} returns this
 */
proto.userProxy.LuckyWheelDiamondChange.prototype.setGroupid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.userProxy.ConfigChange.prototype.toObject = function(opt_includeInstance) {
  return proto.userProxy.ConfigChange.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.userProxy.ConfigChange} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.userProxy.ConfigChange.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.userProxy.ConfigChange}
 */
proto.userProxy.ConfigChange.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.userProxy.ConfigChange;
  return proto.userProxy.ConfigChange.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.userProxy.ConfigChange} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.userProxy.ConfigChange}
 */
proto.userProxy.ConfigChange.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.userProxy.ConfigChange.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.userProxy.ConfigChange.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.userProxy.ConfigChange} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.userProxy.ConfigChange.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 type = 1;
 * @return {number}
 */
proto.userProxy.ConfigChange.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.userProxy.ConfigChange} returns this
 */
proto.userProxy.ConfigChange.prototype.setType = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.userProxy.GlobalRocketNotice.prototype.toObject = function(opt_includeInstance) {
  return proto.userProxy.GlobalRocketNotice.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.userProxy.GlobalRocketNotice} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.userProxy.GlobalRocketNotice.toObject = function(includeInstance, msg) {
  var f, obj = {
    groupid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    period: jspb.Message.getFieldWithDefault(msg, 2, ""),
    round: jspb.Message.getFieldWithDefault(msg, 3, 0),
    stage: jspb.Message.getFieldWithDefault(msg, 4, 0),
    topusericon: jspb.Message.getFieldWithDefault(msg, 5, ""),
    nick: jspb.Message.getFieldWithDefault(msg, 6, ""),
    code: jspb.Message.getFieldWithDefault(msg, 7, ""),
    avatar: jspb.Message.getFieldWithDefault(msg, 8, ""),
    svip: (f = msg.getSvip()) && proto.userProxy.Svip.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.userProxy.GlobalRocketNotice}
 */
proto.userProxy.GlobalRocketNotice.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.userProxy.GlobalRocketNotice;
  return proto.userProxy.GlobalRocketNotice.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.userProxy.GlobalRocketNotice} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.userProxy.GlobalRocketNotice}
 */
proto.userProxy.GlobalRocketNotice.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroupid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPeriod(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRound(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setStage(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setTopusericon(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setNick(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setCode(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setAvatar(value);
      break;
    case 9:
      var value = new proto.userProxy.Svip;
      reader.readMessage(value,proto.userProxy.Svip.deserializeBinaryFromReader);
      msg.setSvip(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.userProxy.GlobalRocketNotice.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.userProxy.GlobalRocketNotice.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.userProxy.GlobalRocketNotice} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.userProxy.GlobalRocketNotice.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGroupid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPeriod();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRound();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getStage();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getTopusericon();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getNick();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getCode();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getAvatar();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getSvip();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.userProxy.Svip.serializeBinaryToWriter
    );
  }
};


/**
 * optional string groupId = 1;
 * @return {string}
 */
proto.userProxy.GlobalRocketNotice.prototype.getGroupid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.userProxy.GlobalRocketNotice} returns this
 */
proto.userProxy.GlobalRocketNotice.prototype.setGroupid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string period = 2;
 * @return {string}
 */
proto.userProxy.GlobalRocketNotice.prototype.getPeriod = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.userProxy.GlobalRocketNotice} returns this
 */
proto.userProxy.GlobalRocketNotice.prototype.setPeriod = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint32 round = 3;
 * @return {number}
 */
proto.userProxy.GlobalRocketNotice.prototype.getRound = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.userProxy.GlobalRocketNotice} returns this
 */
proto.userProxy.GlobalRocketNotice.prototype.setRound = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 stage = 4;
 * @return {number}
 */
proto.userProxy.GlobalRocketNotice.prototype.getStage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.userProxy.GlobalRocketNotice} returns this
 */
proto.userProxy.GlobalRocketNotice.prototype.setStage = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string topUserIcon = 5;
 * @return {string}
 */
proto.userProxy.GlobalRocketNotice.prototype.getTopusericon = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.userProxy.GlobalRocketNotice} returns this
 */
proto.userProxy.GlobalRocketNotice.prototype.setTopusericon = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string nick = 6;
 * @return {string}
 */
proto.userProxy.GlobalRocketNotice.prototype.getNick = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.userProxy.GlobalRocketNotice} returns this
 */
proto.userProxy.GlobalRocketNotice.prototype.setNick = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string code = 7;
 * @return {string}
 */
proto.userProxy.GlobalRocketNotice.prototype.getCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.userProxy.GlobalRocketNotice} returns this
 */
proto.userProxy.GlobalRocketNotice.prototype.setCode = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string avatar = 8;
 * @return {string}
 */
proto.userProxy.GlobalRocketNotice.prototype.getAvatar = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.userProxy.GlobalRocketNotice} returns this
 */
proto.userProxy.GlobalRocketNotice.prototype.setAvatar = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional Svip svip = 9;
 * @return {?proto.userProxy.Svip}
 */
proto.userProxy.GlobalRocketNotice.prototype.getSvip = function() {
  return /** @type{?proto.userProxy.Svip} */ (
    jspb.Message.getWrapperField(this, proto.userProxy.Svip, 9));
};


/**
 * @param {?proto.userProxy.Svip|undefined} value
 * @return {!proto.userProxy.GlobalRocketNotice} returns this
*/
proto.userProxy.GlobalRocketNotice.prototype.setSvip = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.userProxy.GlobalRocketNotice} returns this
 */
proto.userProxy.GlobalRocketNotice.prototype.clearSvip = function() {
  return this.setSvip(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.userProxy.GlobalRocketNotice.prototype.hasSvip = function() {
  return jspb.Message.getField(this, 9) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.userProxy.GroupSendNotice.prototype.toObject = function(opt_includeInstance) {
  return proto.userProxy.GroupSendNotice.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.userProxy.GroupSendNotice} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.userProxy.GroupSendNotice.toObject = function(includeInstance, msg) {
  var f, obj = {
    senderextid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    sendercode: jspb.Message.getFieldWithDefault(msg, 2, ""),
    sendersex: jspb.Message.getFieldWithDefault(msg, 3, 0),
    senderavatar: jspb.Message.getFieldWithDefault(msg, 4, ""),
    text: jspb.Message.getFieldWithDefault(msg, 5, ""),
    groupname: jspb.Message.getFieldWithDefault(msg, 6, ""),
    groupcode: jspb.Message.getFieldWithDefault(msg, 7, ""),
    groupavatar: jspb.Message.getFieldWithDefault(msg, 8, ""),
    userinnum: jspb.Message.getFieldWithDefault(msg, 9, 0),
    groupid: jspb.Message.getFieldWithDefault(msg, 10, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.userProxy.GroupSendNotice}
 */
proto.userProxy.GroupSendNotice.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.userProxy.GroupSendNotice;
  return proto.userProxy.GroupSendNotice.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.userProxy.GroupSendNotice} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.userProxy.GroupSendNotice}
 */
proto.userProxy.GroupSendNotice.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSenderextid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSendercode(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSendersex(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSenderavatar(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setText(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroupname(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroupcode(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroupavatar(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUserinnum(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroupid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.userProxy.GroupSendNotice.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.userProxy.GroupSendNotice.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.userProxy.GroupSendNotice} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.userProxy.GroupSendNotice.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSenderextid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSendercode();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSendersex();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getSenderavatar();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getText();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getGroupname();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getGroupcode();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getGroupavatar();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getUserinnum();
  if (f !== 0) {
    writer.writeUint32(
      9,
      f
    );
  }
  f = message.getGroupid();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
};


/**
 * optional string senderExtId = 1;
 * @return {string}
 */
proto.userProxy.GroupSendNotice.prototype.getSenderextid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.userProxy.GroupSendNotice} returns this
 */
proto.userProxy.GroupSendNotice.prototype.setSenderextid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string senderCode = 2;
 * @return {string}
 */
proto.userProxy.GroupSendNotice.prototype.getSendercode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.userProxy.GroupSendNotice} returns this
 */
proto.userProxy.GroupSendNotice.prototype.setSendercode = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint32 senderSex = 3;
 * @return {number}
 */
proto.userProxy.GroupSendNotice.prototype.getSendersex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.userProxy.GroupSendNotice} returns this
 */
proto.userProxy.GroupSendNotice.prototype.setSendersex = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string senderAvatar = 4;
 * @return {string}
 */
proto.userProxy.GroupSendNotice.prototype.getSenderavatar = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.userProxy.GroupSendNotice} returns this
 */
proto.userProxy.GroupSendNotice.prototype.setSenderavatar = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string text = 5;
 * @return {string}
 */
proto.userProxy.GroupSendNotice.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.userProxy.GroupSendNotice} returns this
 */
proto.userProxy.GroupSendNotice.prototype.setText = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string groupName = 6;
 * @return {string}
 */
proto.userProxy.GroupSendNotice.prototype.getGroupname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.userProxy.GroupSendNotice} returns this
 */
proto.userProxy.GroupSendNotice.prototype.setGroupname = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string groupCode = 7;
 * @return {string}
 */
proto.userProxy.GroupSendNotice.prototype.getGroupcode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.userProxy.GroupSendNotice} returns this
 */
proto.userProxy.GroupSendNotice.prototype.setGroupcode = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string groupAvatar = 8;
 * @return {string}
 */
proto.userProxy.GroupSendNotice.prototype.getGroupavatar = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.userProxy.GroupSendNotice} returns this
 */
proto.userProxy.GroupSendNotice.prototype.setGroupavatar = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional uint32 userInNum = 9;
 * @return {number}
 */
proto.userProxy.GroupSendNotice.prototype.getUserinnum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.userProxy.GroupSendNotice} returns this
 */
proto.userProxy.GroupSendNotice.prototype.setUserinnum = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional string groupId = 10;
 * @return {string}
 */
proto.userProxy.GroupSendNotice.prototype.getGroupid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.userProxy.GroupSendNotice} returns this
 */
proto.userProxy.GroupSendNotice.prototype.setGroupid = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.userProxy.GlobalBroadcast.prototype.toObject = function(opt_includeInstance) {
  return proto.userProxy.GlobalBroadcast.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.userProxy.GlobalBroadcast} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.userProxy.GlobalBroadcast.toObject = function(includeInstance, msg) {
  var f, obj = {
    senderextid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    sendercode: jspb.Message.getFieldWithDefault(msg, 2, ""),
    sendersex: jspb.Message.getFieldWithDefault(msg, 3, 0),
    senderavatar: jspb.Message.getFieldWithDefault(msg, 4, ""),
    sendernick: jspb.Message.getFieldWithDefault(msg, 5, ""),
    msg: jspb.Message.getFieldWithDefault(msg, 6, ""),
    groupid: jspb.Message.getFieldWithDefault(msg, 7, ""),
    sendernoblelevel: jspb.Message.getFieldWithDefault(msg, 8, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.userProxy.GlobalBroadcast}
 */
proto.userProxy.GlobalBroadcast.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.userProxy.GlobalBroadcast;
  return proto.userProxy.GlobalBroadcast.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.userProxy.GlobalBroadcast} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.userProxy.GlobalBroadcast}
 */
proto.userProxy.GlobalBroadcast.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSenderextid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSendercode(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSendersex(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSenderavatar(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setSendernick(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setMsg(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroupid(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSendernoblelevel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.userProxy.GlobalBroadcast.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.userProxy.GlobalBroadcast.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.userProxy.GlobalBroadcast} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.userProxy.GlobalBroadcast.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSenderextid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSendercode();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSendersex();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getSenderavatar();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getSendernick();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getMsg();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getGroupid();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getSendernoblelevel();
  if (f !== 0) {
    writer.writeUint32(
      8,
      f
    );
  }
};


/**
 * optional string senderExtId = 1;
 * @return {string}
 */
proto.userProxy.GlobalBroadcast.prototype.getSenderextid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.userProxy.GlobalBroadcast} returns this
 */
proto.userProxy.GlobalBroadcast.prototype.setSenderextid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string senderCode = 2;
 * @return {string}
 */
proto.userProxy.GlobalBroadcast.prototype.getSendercode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.userProxy.GlobalBroadcast} returns this
 */
proto.userProxy.GlobalBroadcast.prototype.setSendercode = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint32 senderSex = 3;
 * @return {number}
 */
proto.userProxy.GlobalBroadcast.prototype.getSendersex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.userProxy.GlobalBroadcast} returns this
 */
proto.userProxy.GlobalBroadcast.prototype.setSendersex = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string senderAvatar = 4;
 * @return {string}
 */
proto.userProxy.GlobalBroadcast.prototype.getSenderavatar = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.userProxy.GlobalBroadcast} returns this
 */
proto.userProxy.GlobalBroadcast.prototype.setSenderavatar = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string senderNick = 5;
 * @return {string}
 */
proto.userProxy.GlobalBroadcast.prototype.getSendernick = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.userProxy.GlobalBroadcast} returns this
 */
proto.userProxy.GlobalBroadcast.prototype.setSendernick = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string msg = 6;
 * @return {string}
 */
proto.userProxy.GlobalBroadcast.prototype.getMsg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.userProxy.GlobalBroadcast} returns this
 */
proto.userProxy.GlobalBroadcast.prototype.setMsg = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string groupId = 7;
 * @return {string}
 */
proto.userProxy.GlobalBroadcast.prototype.getGroupid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.userProxy.GlobalBroadcast} returns this
 */
proto.userProxy.GlobalBroadcast.prototype.setGroupid = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional uint32 senderNobleLevel = 8;
 * @return {number}
 */
proto.userProxy.GlobalBroadcast.prototype.getSendernoblelevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.userProxy.GlobalBroadcast} returns this
 */
proto.userProxy.GlobalBroadcast.prototype.setSendernoblelevel = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.userProxy.MicTaskFinish.prototype.toObject = function(opt_includeInstance) {
  return proto.userProxy.MicTaskFinish.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.userProxy.MicTaskFinish} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.userProxy.MicTaskFinish.toObject = function(includeInstance, msg) {
  var f, obj = {
    userid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    diamond: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.userProxy.MicTaskFinish}
 */
proto.userProxy.MicTaskFinish.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.userProxy.MicTaskFinish;
  return proto.userProxy.MicTaskFinish.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.userProxy.MicTaskFinish} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.userProxy.MicTaskFinish}
 */
proto.userProxy.MicTaskFinish.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDiamond(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.userProxy.MicTaskFinish.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.userProxy.MicTaskFinish.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.userProxy.MicTaskFinish} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.userProxy.MicTaskFinish.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDiamond();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional string userId = 1;
 * @return {string}
 */
proto.userProxy.MicTaskFinish.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.userProxy.MicTaskFinish} returns this
 */
proto.userProxy.MicTaskFinish.prototype.setUserid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 diamond = 2;
 * @return {number}
 */
proto.userProxy.MicTaskFinish.prototype.getDiamond = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.userProxy.MicTaskFinish} returns this
 */
proto.userProxy.MicTaskFinish.prototype.setDiamond = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.userProxy.FruitMachine.prototype.toObject = function(opt_includeInstance) {
  return proto.userProxy.FruitMachine.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.userProxy.FruitMachine} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.userProxy.FruitMachine.toObject = function(includeInstance, msg) {
  var f, obj = {
    date: jspb.Message.getFieldWithDefault(msg, 1, ""),
    round: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.userProxy.FruitMachine}
 */
proto.userProxy.FruitMachine.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.userProxy.FruitMachine;
  return proto.userProxy.FruitMachine.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.userProxy.FruitMachine} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.userProxy.FruitMachine}
 */
proto.userProxy.FruitMachine.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDate(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRound(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.userProxy.FruitMachine.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.userProxy.FruitMachine.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.userProxy.FruitMachine} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.userProxy.FruitMachine.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDate();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRound();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional string date = 1;
 * @return {string}
 */
proto.userProxy.FruitMachine.prototype.getDate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.userProxy.FruitMachine} returns this
 */
proto.userProxy.FruitMachine.prototype.setDate = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 round = 2;
 * @return {number}
 */
proto.userProxy.FruitMachine.prototype.getRound = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.userProxy.FruitMachine} returns this
 */
proto.userProxy.FruitMachine.prototype.setRound = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.userProxy.NobleChange.prototype.toObject = function(opt_includeInstance) {
  return proto.userProxy.NobleChange.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.userProxy.NobleChange} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.userProxy.NobleChange.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.userProxy.NobleChange}
 */
proto.userProxy.NobleChange.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.userProxy.NobleChange;
  return proto.userProxy.NobleChange.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.userProxy.NobleChange} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.userProxy.NobleChange}
 */
proto.userProxy.NobleChange.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.userProxy.NobleChange.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.userProxy.NobleChange.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.userProxy.NobleChange} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.userProxy.NobleChange.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.userProxy.JoinGroup.prototype.toObject = function(opt_includeInstance) {
  return proto.userProxy.JoinGroup.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.userProxy.JoinGroup} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.userProxy.JoinGroup.toObject = function(includeInstance, msg) {
  var f, obj = {
    groupid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    externalid: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.userProxy.JoinGroup}
 */
proto.userProxy.JoinGroup.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.userProxy.JoinGroup;
  return proto.userProxy.JoinGroup.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.userProxy.JoinGroup} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.userProxy.JoinGroup}
 */
proto.userProxy.JoinGroup.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroupid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setExternalid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.userProxy.JoinGroup.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.userProxy.JoinGroup.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.userProxy.JoinGroup} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.userProxy.JoinGroup.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGroupid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getExternalid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string groupId = 1;
 * @return {string}
 */
proto.userProxy.JoinGroup.prototype.getGroupid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.userProxy.JoinGroup} returns this
 */
proto.userProxy.JoinGroup.prototype.setGroupid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string externalId = 2;
 * @return {string}
 */
proto.userProxy.JoinGroup.prototype.getExternalid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.userProxy.JoinGroup} returns this
 */
proto.userProxy.JoinGroup.prototype.setExternalid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.userProxy.VideoTimeMinuteSuccess.prototype.toObject = function(opt_includeInstance) {
  return proto.userProxy.VideoTimeMinuteSuccess.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.userProxy.VideoTimeMinuteSuccess} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.userProxy.VideoTimeMinuteSuccess.toObject = function(includeInstance, msg) {
  var f, obj = {
    token: jspb.Message.getFieldWithDefault(msg, 1, ""),
    duration: jspb.Message.getFieldWithDefault(msg, 2, 0),
    endtimestamp: jspb.Message.getFieldWithDefault(msg, 3, 0),
    channelid: jspb.Message.getFieldWithDefault(msg, 4, ""),
    senderagoraid: jspb.Message.getFieldWithDefault(msg, 5, 0),
    videouniqueid: jspb.Message.getFieldWithDefault(msg, 6, ""),
    issend: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
    sendremaindiamond: jspb.Message.getFieldWithDefault(msg, 8, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.userProxy.VideoTimeMinuteSuccess}
 */
proto.userProxy.VideoTimeMinuteSuccess.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.userProxy.VideoTimeMinuteSuccess;
  return proto.userProxy.VideoTimeMinuteSuccess.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.userProxy.VideoTimeMinuteSuccess} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.userProxy.VideoTimeMinuteSuccess}
 */
proto.userProxy.VideoTimeMinuteSuccess.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDuration(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setEndtimestamp(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setChannelid(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSenderagoraid(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setVideouniqueid(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIssend(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSendremaindiamond(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.userProxy.VideoTimeMinuteSuccess.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.userProxy.VideoTimeMinuteSuccess.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.userProxy.VideoTimeMinuteSuccess} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.userProxy.VideoTimeMinuteSuccess.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDuration();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getEndtimestamp();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getChannelid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getSenderagoraid();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getVideouniqueid();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getIssend();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getSendremaindiamond();
  if (f !== 0) {
    writer.writeUint32(
      8,
      f
    );
  }
};


/**
 * optional string token = 1;
 * @return {string}
 */
proto.userProxy.VideoTimeMinuteSuccess.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.userProxy.VideoTimeMinuteSuccess} returns this
 */
proto.userProxy.VideoTimeMinuteSuccess.prototype.setToken = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 duration = 2;
 * @return {number}
 */
proto.userProxy.VideoTimeMinuteSuccess.prototype.getDuration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.userProxy.VideoTimeMinuteSuccess} returns this
 */
proto.userProxy.VideoTimeMinuteSuccess.prototype.setDuration = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 endTimestamp = 3;
 * @return {number}
 */
proto.userProxy.VideoTimeMinuteSuccess.prototype.getEndtimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.userProxy.VideoTimeMinuteSuccess} returns this
 */
proto.userProxy.VideoTimeMinuteSuccess.prototype.setEndtimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string channelId = 4;
 * @return {string}
 */
proto.userProxy.VideoTimeMinuteSuccess.prototype.getChannelid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.userProxy.VideoTimeMinuteSuccess} returns this
 */
proto.userProxy.VideoTimeMinuteSuccess.prototype.setChannelid = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional uint32 senderAgoraId = 5;
 * @return {number}
 */
proto.userProxy.VideoTimeMinuteSuccess.prototype.getSenderagoraid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.userProxy.VideoTimeMinuteSuccess} returns this
 */
proto.userProxy.VideoTimeMinuteSuccess.prototype.setSenderagoraid = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string videoUniqueId = 6;
 * @return {string}
 */
proto.userProxy.VideoTimeMinuteSuccess.prototype.getVideouniqueid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.userProxy.VideoTimeMinuteSuccess} returns this
 */
proto.userProxy.VideoTimeMinuteSuccess.prototype.setVideouniqueid = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional bool isSend = 7;
 * @return {boolean}
 */
proto.userProxy.VideoTimeMinuteSuccess.prototype.getIssend = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.userProxy.VideoTimeMinuteSuccess} returns this
 */
proto.userProxy.VideoTimeMinuteSuccess.prototype.setIssend = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional uint32 sendRemainDiamond = 8;
 * @return {number}
 */
proto.userProxy.VideoTimeMinuteSuccess.prototype.getSendremaindiamond = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.userProxy.VideoTimeMinuteSuccess} returns this
 */
proto.userProxy.VideoTimeMinuteSuccess.prototype.setSendremaindiamond = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.userProxy.VideoTimeMinuteCheck.prototype.toObject = function(opt_includeInstance) {
  return proto.userProxy.VideoTimeMinuteCheck.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.userProxy.VideoTimeMinuteCheck} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.userProxy.VideoTimeMinuteCheck.toObject = function(includeInstance, msg) {
  var f, obj = {
    videouniqueid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    diamond: jspb.Message.getFieldWithDefault(msg, 2, 0),
    uuid: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.userProxy.VideoTimeMinuteCheck}
 */
proto.userProxy.VideoTimeMinuteCheck.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.userProxy.VideoTimeMinuteCheck;
  return proto.userProxy.VideoTimeMinuteCheck.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.userProxy.VideoTimeMinuteCheck} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.userProxy.VideoTimeMinuteCheck}
 */
proto.userProxy.VideoTimeMinuteCheck.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setVideouniqueid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDiamond(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.userProxy.VideoTimeMinuteCheck.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.userProxy.VideoTimeMinuteCheck.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.userProxy.VideoTimeMinuteCheck} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.userProxy.VideoTimeMinuteCheck.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVideouniqueid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDiamond();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string videoUniqueId = 1;
 * @return {string}
 */
proto.userProxy.VideoTimeMinuteCheck.prototype.getVideouniqueid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.userProxy.VideoTimeMinuteCheck} returns this
 */
proto.userProxy.VideoTimeMinuteCheck.prototype.setVideouniqueid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 diamond = 2;
 * @return {number}
 */
proto.userProxy.VideoTimeMinuteCheck.prototype.getDiamond = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.userProxy.VideoTimeMinuteCheck} returns this
 */
proto.userProxy.VideoTimeMinuteCheck.prototype.setDiamond = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string uuid = 3;
 * @return {string}
 */
proto.userProxy.VideoTimeMinuteCheck.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.userProxy.VideoTimeMinuteCheck} returns this
 */
proto.userProxy.VideoTimeMinuteCheck.prototype.setUuid = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.userProxy.VideoMiss.prototype.toObject = function(opt_includeInstance) {
  return proto.userProxy.VideoMiss.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.userProxy.VideoMiss} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.userProxy.VideoMiss.toObject = function(includeInstance, msg) {
  var f, obj = {
    totalnum: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.userProxy.VideoMiss}
 */
proto.userProxy.VideoMiss.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.userProxy.VideoMiss;
  return proto.userProxy.VideoMiss.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.userProxy.VideoMiss} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.userProxy.VideoMiss}
 */
proto.userProxy.VideoMiss.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTotalnum(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.userProxy.VideoMiss.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.userProxy.VideoMiss.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.userProxy.VideoMiss} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.userProxy.VideoMiss.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTotalnum();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 totalNum = 1;
 * @return {number}
 */
proto.userProxy.VideoMiss.prototype.getTotalnum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.userProxy.VideoMiss} returns this
 */
proto.userProxy.VideoMiss.prototype.setTotalnum = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.userProxy.GroupActivity.prototype.toObject = function(opt_includeInstance) {
  return proto.userProxy.GroupActivity.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.userProxy.GroupActivity} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.userProxy.GroupActivity.toObject = function(includeInstance, msg) {
  var f, obj = {
    activityid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    startat: jspb.Message.getFieldWithDefault(msg, 2, 0),
    endat: jspb.Message.getFieldWithDefault(msg, 3, 0),
    banner: jspb.Message.getFieldWithDefault(msg, 4, ""),
    actype: jspb.Message.getFieldWithDefault(msg, 5, 0),
    theme: jspb.Message.getFieldWithDefault(msg, 6, ""),
    personnum: jspb.Message.getFieldWithDefault(msg, 7, 0),
    issubscribe: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),
    groupid: jspb.Message.getFieldWithDefault(msg, 9, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.userProxy.GroupActivity}
 */
proto.userProxy.GroupActivity.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.userProxy.GroupActivity;
  return proto.userProxy.GroupActivity.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.userProxy.GroupActivity} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.userProxy.GroupActivity}
 */
proto.userProxy.GroupActivity.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setActivityid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setStartat(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setEndat(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setBanner(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setActype(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setTheme(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPersonnum(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIssubscribe(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroupid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.userProxy.GroupActivity.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.userProxy.GroupActivity.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.userProxy.GroupActivity} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.userProxy.GroupActivity.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActivityid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStartat();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getEndat();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getBanner();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getActype();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getTheme();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getPersonnum();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getIssubscribe();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getGroupid();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
};


/**
 * optional string ActivityId = 1;
 * @return {string}
 */
proto.userProxy.GroupActivity.prototype.getActivityid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.userProxy.GroupActivity} returns this
 */
proto.userProxy.GroupActivity.prototype.setActivityid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 StartAt = 2;
 * @return {number}
 */
proto.userProxy.GroupActivity.prototype.getStartat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.userProxy.GroupActivity} returns this
 */
proto.userProxy.GroupActivity.prototype.setStartat = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 EndAt = 3;
 * @return {number}
 */
proto.userProxy.GroupActivity.prototype.getEndat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.userProxy.GroupActivity} returns this
 */
proto.userProxy.GroupActivity.prototype.setEndat = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string Banner = 4;
 * @return {string}
 */
proto.userProxy.GroupActivity.prototype.getBanner = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.userProxy.GroupActivity} returns this
 */
proto.userProxy.GroupActivity.prototype.setBanner = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int32 AcType = 5;
 * @return {number}
 */
proto.userProxy.GroupActivity.prototype.getActype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.userProxy.GroupActivity} returns this
 */
proto.userProxy.GroupActivity.prototype.setActype = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string Theme = 6;
 * @return {string}
 */
proto.userProxy.GroupActivity.prototype.getTheme = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.userProxy.GroupActivity} returns this
 */
proto.userProxy.GroupActivity.prototype.setTheme = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional int32 PersonNum = 7;
 * @return {number}
 */
proto.userProxy.GroupActivity.prototype.getPersonnum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.userProxy.GroupActivity} returns this
 */
proto.userProxy.GroupActivity.prototype.setPersonnum = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional bool IsSubscribe = 8;
 * @return {boolean}
 */
proto.userProxy.GroupActivity.prototype.getIssubscribe = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.userProxy.GroupActivity} returns this
 */
proto.userProxy.GroupActivity.prototype.setIssubscribe = function(value) {
  return jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * optional string GroupId = 9;
 * @return {string}
 */
proto.userProxy.GroupActivity.prototype.getGroupid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.userProxy.GroupActivity} returns this
 */
proto.userProxy.GroupActivity.prototype.setGroupid = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.userProxy.RoomInviteMember.prototype.toObject = function(opt_includeInstance) {
  return proto.userProxy.RoomInviteMember.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.userProxy.RoomInviteMember} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.userProxy.RoomInviteMember.toObject = function(includeInstance, msg) {
  var f, obj = {
    groupId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.userProxy.RoomInviteMember}
 */
proto.userProxy.RoomInviteMember.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.userProxy.RoomInviteMember;
  return proto.userProxy.RoomInviteMember.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.userProxy.RoomInviteMember} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.userProxy.RoomInviteMember}
 */
proto.userProxy.RoomInviteMember.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroupId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.userProxy.RoomInviteMember.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.userProxy.RoomInviteMember.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.userProxy.RoomInviteMember} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.userProxy.RoomInviteMember.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGroupId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string group_id = 1;
 * @return {string}
 */
proto.userProxy.RoomInviteMember.prototype.getGroupId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.userProxy.RoomInviteMember} returns this
 */
proto.userProxy.RoomInviteMember.prototype.setGroupId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.userProxy.DiamondChange.prototype.toObject = function(opt_includeInstance) {
  return proto.userProxy.DiamondChange.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.userProxy.DiamondChange} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.userProxy.DiamondChange.toObject = function(includeInstance, msg) {
  var f, obj = {
    remaindiamond: jspb.Message.getFieldWithDefault(msg, 1, 0),
    remainpinkdiamond: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.userProxy.DiamondChange}
 */
proto.userProxy.DiamondChange.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.userProxy.DiamondChange;
  return proto.userProxy.DiamondChange.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.userProxy.DiamondChange} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.userProxy.DiamondChange}
 */
proto.userProxy.DiamondChange.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRemaindiamond(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRemainpinkdiamond(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.userProxy.DiamondChange.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.userProxy.DiamondChange.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.userProxy.DiamondChange} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.userProxy.DiamondChange.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRemaindiamond();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getRemainpinkdiamond();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 remainDiamond = 1;
 * @return {number}
 */
proto.userProxy.DiamondChange.prototype.getRemaindiamond = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.userProxy.DiamondChange} returns this
 */
proto.userProxy.DiamondChange.prototype.setRemaindiamond = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 remainPinkDiamond = 2;
 * @return {number}
 */
proto.userProxy.DiamondChange.prototype.getRemainpinkdiamond = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.userProxy.DiamondChange} returns this
 */
proto.userProxy.DiamondChange.prototype.setRemainpinkdiamond = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.userProxy.GlobalGameBanner.prototype.toObject = function(opt_includeInstance) {
  return proto.userProxy.GlobalGameBanner.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.userProxy.GlobalGameBanner} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.userProxy.GlobalGameBanner.toObject = function(includeInstance, msg) {
  var f, obj = {
    gametype: jspb.Message.getFieldWithDefault(msg, 1, 0),
    userid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    avatar: jspb.Message.getFieldWithDefault(msg, 3, ""),
    diamond: jspb.Message.getFieldWithDefault(msg, 4, 0),
    bannerurl: jspb.Message.getFieldWithDefault(msg, 5, ""),
    gameid: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.userProxy.GlobalGameBanner}
 */
proto.userProxy.GlobalGameBanner.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.userProxy.GlobalGameBanner;
  return proto.userProxy.GlobalGameBanner.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.userProxy.GlobalGameBanner} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.userProxy.GlobalGameBanner}
 */
proto.userProxy.GlobalGameBanner.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGametype(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUserid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAvatar(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setDiamond(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setBannerurl(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGameid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.userProxy.GlobalGameBanner.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.userProxy.GlobalGameBanner.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.userProxy.GlobalGameBanner} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.userProxy.GlobalGameBanner.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGametype();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getUserid();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getAvatar();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDiamond();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getBannerurl();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getGameid();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
};


/**
 * optional uint32 gameType = 1;
 * @return {number}
 */
proto.userProxy.GlobalGameBanner.prototype.getGametype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.userProxy.GlobalGameBanner} returns this
 */
proto.userProxy.GlobalGameBanner.prototype.setGametype = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 userId = 2;
 * @return {number}
 */
proto.userProxy.GlobalGameBanner.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.userProxy.GlobalGameBanner} returns this
 */
proto.userProxy.GlobalGameBanner.prototype.setUserid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string avatar = 3;
 * @return {string}
 */
proto.userProxy.GlobalGameBanner.prototype.getAvatar = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.userProxy.GlobalGameBanner} returns this
 */
proto.userProxy.GlobalGameBanner.prototype.setAvatar = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional uint64 diamond = 4;
 * @return {number}
 */
proto.userProxy.GlobalGameBanner.prototype.getDiamond = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.userProxy.GlobalGameBanner} returns this
 */
proto.userProxy.GlobalGameBanner.prototype.setDiamond = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string bannerUrl = 5;
 * @return {string}
 */
proto.userProxy.GlobalGameBanner.prototype.getBannerurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.userProxy.GlobalGameBanner} returns this
 */
proto.userProxy.GlobalGameBanner.prototype.setBannerurl = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional uint64 gameId = 6;
 * @return {number}
 */
proto.userProxy.GlobalGameBanner.prototype.getGameid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.userProxy.GlobalGameBanner} returns this
 */
proto.userProxy.GlobalGameBanner.prototype.setGameid = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.userProxy.SheepMatchSuccess.prototype.toObject = function(opt_includeInstance) {
  return proto.userProxy.SheepMatchSuccess.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.userProxy.SheepMatchSuccess} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.userProxy.SheepMatchSuccess.toObject = function(includeInstance, msg) {
  var f, obj = {
    matchId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    user: (f = msg.getUser()) && proto.userProxy.User.toObject(includeInstance, f),
    otheruser: (f = msg.getOtheruser()) && proto.userProxy.User.toObject(includeInstance, f),
    gameId: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.userProxy.SheepMatchSuccess}
 */
proto.userProxy.SheepMatchSuccess.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.userProxy.SheepMatchSuccess;
  return proto.userProxy.SheepMatchSuccess.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.userProxy.SheepMatchSuccess} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.userProxy.SheepMatchSuccess}
 */
proto.userProxy.SheepMatchSuccess.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMatchId(value);
      break;
    case 2:
      var value = new proto.userProxy.User;
      reader.readMessage(value,proto.userProxy.User.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    case 3:
      var value = new proto.userProxy.User;
      reader.readMessage(value,proto.userProxy.User.deserializeBinaryFromReader);
      msg.setOtheruser(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGameId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.userProxy.SheepMatchSuccess.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.userProxy.SheepMatchSuccess.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.userProxy.SheepMatchSuccess} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.userProxy.SheepMatchSuccess.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMatchId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.userProxy.User.serializeBinaryToWriter
    );
  }
  f = message.getOtheruser();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.userProxy.User.serializeBinaryToWriter
    );
  }
  f = message.getGameId();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
};


/**
 * optional uint64 match_id = 1;
 * @return {number}
 */
proto.userProxy.SheepMatchSuccess.prototype.getMatchId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.userProxy.SheepMatchSuccess} returns this
 */
proto.userProxy.SheepMatchSuccess.prototype.setMatchId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional User user = 2;
 * @return {?proto.userProxy.User}
 */
proto.userProxy.SheepMatchSuccess.prototype.getUser = function() {
  return /** @type{?proto.userProxy.User} */ (
    jspb.Message.getWrapperField(this, proto.userProxy.User, 2));
};


/**
 * @param {?proto.userProxy.User|undefined} value
 * @return {!proto.userProxy.SheepMatchSuccess} returns this
*/
proto.userProxy.SheepMatchSuccess.prototype.setUser = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.userProxy.SheepMatchSuccess} returns this
 */
proto.userProxy.SheepMatchSuccess.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.userProxy.SheepMatchSuccess.prototype.hasUser = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional User otherUser = 3;
 * @return {?proto.userProxy.User}
 */
proto.userProxy.SheepMatchSuccess.prototype.getOtheruser = function() {
  return /** @type{?proto.userProxy.User} */ (
    jspb.Message.getWrapperField(this, proto.userProxy.User, 3));
};


/**
 * @param {?proto.userProxy.User|undefined} value
 * @return {!proto.userProxy.SheepMatchSuccess} returns this
*/
proto.userProxy.SheepMatchSuccess.prototype.setOtheruser = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.userProxy.SheepMatchSuccess} returns this
 */
proto.userProxy.SheepMatchSuccess.prototype.clearOtheruser = function() {
  return this.setOtheruser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.userProxy.SheepMatchSuccess.prototype.hasOtheruser = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint64 game_id = 4;
 * @return {number}
 */
proto.userProxy.SheepMatchSuccess.prototype.getGameId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.userProxy.SheepMatchSuccess} returns this
 */
proto.userProxy.SheepMatchSuccess.prototype.setGameId = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.userProxy.SheepGamePlayer.prototype.toObject = function(opt_includeInstance) {
  return proto.userProxy.SheepGamePlayer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.userProxy.SheepGamePlayer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.userProxy.SheepGamePlayer.toObject = function(includeInstance, msg) {
  var f, obj = {
    user: (f = msg.getUser()) && proto.userProxy.User.toObject(includeInstance, f),
    isWin: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    rank: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.userProxy.SheepGamePlayer}
 */
proto.userProxy.SheepGamePlayer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.userProxy.SheepGamePlayer;
  return proto.userProxy.SheepGamePlayer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.userProxy.SheepGamePlayer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.userProxy.SheepGamePlayer}
 */
proto.userProxy.SheepGamePlayer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.userProxy.User;
      reader.readMessage(value,proto.userProxy.User.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsWin(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRank(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.userProxy.SheepGamePlayer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.userProxy.SheepGamePlayer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.userProxy.SheepGamePlayer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.userProxy.SheepGamePlayer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.userProxy.User.serializeBinaryToWriter
    );
  }
  f = message.getIsWin();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getRank();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional User user = 1;
 * @return {?proto.userProxy.User}
 */
proto.userProxy.SheepGamePlayer.prototype.getUser = function() {
  return /** @type{?proto.userProxy.User} */ (
    jspb.Message.getWrapperField(this, proto.userProxy.User, 1));
};


/**
 * @param {?proto.userProxy.User|undefined} value
 * @return {!proto.userProxy.SheepGamePlayer} returns this
*/
proto.userProxy.SheepGamePlayer.prototype.setUser = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.userProxy.SheepGamePlayer} returns this
 */
proto.userProxy.SheepGamePlayer.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.userProxy.SheepGamePlayer.prototype.hasUser = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool is_win = 2;
 * @return {boolean}
 */
proto.userProxy.SheepGamePlayer.prototype.getIsWin = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.userProxy.SheepGamePlayer} returns this
 */
proto.userProxy.SheepGamePlayer.prototype.setIsWin = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional int32 rank = 3;
 * @return {number}
 */
proto.userProxy.SheepGamePlayer.prototype.getRank = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.userProxy.SheepGamePlayer} returns this
 */
proto.userProxy.SheepGamePlayer.prototype.setRank = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.userProxy.SheepGameResult.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.userProxy.SheepGameResult.prototype.toObject = function(opt_includeInstance) {
  return proto.userProxy.SheepGameResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.userProxy.SheepGameResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.userProxy.SheepGameResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    matchId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    playersList: jspb.Message.toObjectList(msg.getPlayersList(),
    proto.userProxy.SheepGamePlayer.toObject, includeInstance),
    gameId: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.userProxy.SheepGameResult}
 */
proto.userProxy.SheepGameResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.userProxy.SheepGameResult;
  return proto.userProxy.SheepGameResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.userProxy.SheepGameResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.userProxy.SheepGameResult}
 */
proto.userProxy.SheepGameResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMatchId(value);
      break;
    case 2:
      var value = new proto.userProxy.SheepGamePlayer;
      reader.readMessage(value,proto.userProxy.SheepGamePlayer.deserializeBinaryFromReader);
      msg.addPlayers(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGameId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.userProxy.SheepGameResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.userProxy.SheepGameResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.userProxy.SheepGameResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.userProxy.SheepGameResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMatchId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getPlayersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.userProxy.SheepGamePlayer.serializeBinaryToWriter
    );
  }
  f = message.getGameId();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * optional uint64 match_id = 1;
 * @return {number}
 */
proto.userProxy.SheepGameResult.prototype.getMatchId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.userProxy.SheepGameResult} returns this
 */
proto.userProxy.SheepGameResult.prototype.setMatchId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated SheepGamePlayer players = 2;
 * @return {!Array<!proto.userProxy.SheepGamePlayer>}
 */
proto.userProxy.SheepGameResult.prototype.getPlayersList = function() {
  return /** @type{!Array<!proto.userProxy.SheepGamePlayer>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.userProxy.SheepGamePlayer, 2));
};


/**
 * @param {!Array<!proto.userProxy.SheepGamePlayer>} value
 * @return {!proto.userProxy.SheepGameResult} returns this
*/
proto.userProxy.SheepGameResult.prototype.setPlayersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.userProxy.SheepGamePlayer=} opt_value
 * @param {number=} opt_index
 * @return {!proto.userProxy.SheepGamePlayer}
 */
proto.userProxy.SheepGameResult.prototype.addPlayers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.userProxy.SheepGamePlayer, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.userProxy.SheepGameResult} returns this
 */
proto.userProxy.SheepGameResult.prototype.clearPlayersList = function() {
  return this.setPlayersList([]);
};


/**
 * optional uint64 game_id = 3;
 * @return {number}
 */
proto.userProxy.SheepGameResult.prototype.getGameId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.userProxy.SheepGameResult} returns this
 */
proto.userProxy.SheepGameResult.prototype.setGameId = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.userProxy.CpInvite.prototype.toObject = function(opt_includeInstance) {
  return proto.userProxy.CpInvite.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.userProxy.CpInvite} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.userProxy.CpInvite.toObject = function(includeInstance, msg) {
  var f, obj = {
    user: (f = msg.getUser()) && proto.userProxy.User.toObject(includeInstance, f),
    msg: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.userProxy.CpInvite}
 */
proto.userProxy.CpInvite.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.userProxy.CpInvite;
  return proto.userProxy.CpInvite.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.userProxy.CpInvite} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.userProxy.CpInvite}
 */
proto.userProxy.CpInvite.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.userProxy.User;
      reader.readMessage(value,proto.userProxy.User.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMsg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.userProxy.CpInvite.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.userProxy.CpInvite.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.userProxy.CpInvite} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.userProxy.CpInvite.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.userProxy.User.serializeBinaryToWriter
    );
  }
  f = message.getMsg();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional User user = 1;
 * @return {?proto.userProxy.User}
 */
proto.userProxy.CpInvite.prototype.getUser = function() {
  return /** @type{?proto.userProxy.User} */ (
    jspb.Message.getWrapperField(this, proto.userProxy.User, 1));
};


/**
 * @param {?proto.userProxy.User|undefined} value
 * @return {!proto.userProxy.CpInvite} returns this
*/
proto.userProxy.CpInvite.prototype.setUser = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.userProxy.CpInvite} returns this
 */
proto.userProxy.CpInvite.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.userProxy.CpInvite.prototype.hasUser = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string msg = 2;
 * @return {string}
 */
proto.userProxy.CpInvite.prototype.getMsg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.userProxy.CpInvite} returns this
 */
proto.userProxy.CpInvite.prototype.setMsg = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.userProxy.CpUpgrade.prototype.toObject = function(opt_includeInstance) {
  return proto.userProxy.CpUpgrade.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.userProxy.CpUpgrade} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.userProxy.CpUpgrade.toObject = function(includeInstance, msg) {
  var f, obj = {
    user1: (f = msg.getUser1()) && proto.userProxy.User.toObject(includeInstance, f),
    user2: (f = msg.getUser2()) && proto.userProxy.User.toObject(includeInstance, f),
    cpLevel: jspb.Message.getFieldWithDefault(msg, 3, 0),
    groupId: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.userProxy.CpUpgrade}
 */
proto.userProxy.CpUpgrade.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.userProxy.CpUpgrade;
  return proto.userProxy.CpUpgrade.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.userProxy.CpUpgrade} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.userProxy.CpUpgrade}
 */
proto.userProxy.CpUpgrade.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.userProxy.User;
      reader.readMessage(value,proto.userProxy.User.deserializeBinaryFromReader);
      msg.setUser1(value);
      break;
    case 2:
      var value = new proto.userProxy.User;
      reader.readMessage(value,proto.userProxy.User.deserializeBinaryFromReader);
      msg.setUser2(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCpLevel(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroupId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.userProxy.CpUpgrade.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.userProxy.CpUpgrade.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.userProxy.CpUpgrade} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.userProxy.CpUpgrade.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUser1();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.userProxy.User.serializeBinaryToWriter
    );
  }
  f = message.getUser2();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.userProxy.User.serializeBinaryToWriter
    );
  }
  f = message.getCpLevel();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getGroupId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional User user1 = 1;
 * @return {?proto.userProxy.User}
 */
proto.userProxy.CpUpgrade.prototype.getUser1 = function() {
  return /** @type{?proto.userProxy.User} */ (
    jspb.Message.getWrapperField(this, proto.userProxy.User, 1));
};


/**
 * @param {?proto.userProxy.User|undefined} value
 * @return {!proto.userProxy.CpUpgrade} returns this
*/
proto.userProxy.CpUpgrade.prototype.setUser1 = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.userProxy.CpUpgrade} returns this
 */
proto.userProxy.CpUpgrade.prototype.clearUser1 = function() {
  return this.setUser1(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.userProxy.CpUpgrade.prototype.hasUser1 = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional User user2 = 2;
 * @return {?proto.userProxy.User}
 */
proto.userProxy.CpUpgrade.prototype.getUser2 = function() {
  return /** @type{?proto.userProxy.User} */ (
    jspb.Message.getWrapperField(this, proto.userProxy.User, 2));
};


/**
 * @param {?proto.userProxy.User|undefined} value
 * @return {!proto.userProxy.CpUpgrade} returns this
*/
proto.userProxy.CpUpgrade.prototype.setUser2 = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.userProxy.CpUpgrade} returns this
 */
proto.userProxy.CpUpgrade.prototype.clearUser2 = function() {
  return this.setUser2(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.userProxy.CpUpgrade.prototype.hasUser2 = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 cp_level = 3;
 * @return {number}
 */
proto.userProxy.CpUpgrade.prototype.getCpLevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.userProxy.CpUpgrade} returns this
 */
proto.userProxy.CpUpgrade.prototype.setCpLevel = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string group_id = 4;
 * @return {string}
 */
proto.userProxy.CpUpgrade.prototype.getGroupId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.userProxy.CpUpgrade} returns this
 */
proto.userProxy.CpUpgrade.prototype.setGroupId = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.userProxy.SvipUpgrade.prototype.toObject = function(opt_includeInstance) {
  return proto.userProxy.SvipUpgrade.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.userProxy.SvipUpgrade} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.userProxy.SvipUpgrade.toObject = function(includeInstance, msg) {
  var f, obj = {
    user: (f = msg.getUser()) && proto.userProxy.User.toObject(includeInstance, f),
    svipLevel: jspb.Message.getFieldWithDefault(msg, 2, 0),
    groupId: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.userProxy.SvipUpgrade}
 */
proto.userProxy.SvipUpgrade.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.userProxy.SvipUpgrade;
  return proto.userProxy.SvipUpgrade.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.userProxy.SvipUpgrade} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.userProxy.SvipUpgrade}
 */
proto.userProxy.SvipUpgrade.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.userProxy.User;
      reader.readMessage(value,proto.userProxy.User.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSvipLevel(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroupId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.userProxy.SvipUpgrade.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.userProxy.SvipUpgrade.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.userProxy.SvipUpgrade} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.userProxy.SvipUpgrade.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.userProxy.User.serializeBinaryToWriter
    );
  }
  f = message.getSvipLevel();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getGroupId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional User user = 1;
 * @return {?proto.userProxy.User}
 */
proto.userProxy.SvipUpgrade.prototype.getUser = function() {
  return /** @type{?proto.userProxy.User} */ (
    jspb.Message.getWrapperField(this, proto.userProxy.User, 1));
};


/**
 * @param {?proto.userProxy.User|undefined} value
 * @return {!proto.userProxy.SvipUpgrade} returns this
*/
proto.userProxy.SvipUpgrade.prototype.setUser = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.userProxy.SvipUpgrade} returns this
 */
proto.userProxy.SvipUpgrade.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.userProxy.SvipUpgrade.prototype.hasUser = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 svip_level = 2;
 * @return {number}
 */
proto.userProxy.SvipUpgrade.prototype.getSvipLevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.userProxy.SvipUpgrade} returns this
 */
proto.userProxy.SvipUpgrade.prototype.setSvipLevel = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string group_id = 3;
 * @return {string}
 */
proto.userProxy.SvipUpgrade.prototype.getGroupId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.userProxy.SvipUpgrade} returns this
 */
proto.userProxy.SvipUpgrade.prototype.setGroupId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.userProxy.EnterRoom.prototype.toObject = function(opt_includeInstance) {
  return proto.userProxy.EnterRoom.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.userProxy.EnterRoom} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.userProxy.EnterRoom.toObject = function(includeInstance, msg) {
  var f, obj = {
    groupId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.userProxy.EnterRoom}
 */
proto.userProxy.EnterRoom.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.userProxy.EnterRoom;
  return proto.userProxy.EnterRoom.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.userProxy.EnterRoom} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.userProxy.EnterRoom}
 */
proto.userProxy.EnterRoom.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroupId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.userProxy.EnterRoom.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.userProxy.EnterRoom.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.userProxy.EnterRoom} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.userProxy.EnterRoom.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGroupId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string group_id = 1;
 * @return {string}
 */
proto.userProxy.EnterRoom.prototype.getGroupId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.userProxy.EnterRoom} returns this
 */
proto.userProxy.EnterRoom.prototype.setGroupId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.userProxy.LeaveRoom.prototype.toObject = function(opt_includeInstance) {
  return proto.userProxy.LeaveRoom.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.userProxy.LeaveRoom} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.userProxy.LeaveRoom.toObject = function(includeInstance, msg) {
  var f, obj = {
    groupId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.userProxy.LeaveRoom}
 */
proto.userProxy.LeaveRoom.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.userProxy.LeaveRoom;
  return proto.userProxy.LeaveRoom.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.userProxy.LeaveRoom} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.userProxy.LeaveRoom}
 */
proto.userProxy.LeaveRoom.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroupId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.userProxy.LeaveRoom.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.userProxy.LeaveRoom.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.userProxy.LeaveRoom} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.userProxy.LeaveRoom.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGroupId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string group_id = 1;
 * @return {string}
 */
proto.userProxy.LeaveRoom.prototype.getGroupId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.userProxy.LeaveRoom} returns this
 */
proto.userProxy.LeaveRoom.prototype.setGroupId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.userProxy.RoomHeartBeat.prototype.toObject = function(opt_includeInstance) {
  return proto.userProxy.RoomHeartBeat.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.userProxy.RoomHeartBeat} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.userProxy.RoomHeartBeat.toObject = function(includeInstance, msg) {
  var f, obj = {
    groupId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.userProxy.RoomHeartBeat}
 */
proto.userProxy.RoomHeartBeat.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.userProxy.RoomHeartBeat;
  return proto.userProxy.RoomHeartBeat.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.userProxy.RoomHeartBeat} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.userProxy.RoomHeartBeat}
 */
proto.userProxy.RoomHeartBeat.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroupId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.userProxy.RoomHeartBeat.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.userProxy.RoomHeartBeat.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.userProxy.RoomHeartBeat} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.userProxy.RoomHeartBeat.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGroupId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string group_id = 1;
 * @return {string}
 */
proto.userProxy.RoomHeartBeat.prototype.getGroupId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.userProxy.RoomHeartBeat} returns this
 */
proto.userProxy.RoomHeartBeat.prototype.setGroupId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


goog.object.extend(exports, proto.userProxy);
